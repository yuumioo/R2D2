
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004760  08004760  00005760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e8  080047e8  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080047e8  080047e8  000057e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f0  080047f0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f0  080047f0  000057f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047f4  080047f4  000057f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080047f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000010  08004808  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004808  0000613c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b910  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bd  00000000  00000000  00011950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00013210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bc  00000000  00000000  00013d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b4f  00000000  00000000  000145e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7a4  00000000  00000000  0002a133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089061  00000000  00000000  000378d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0938  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003190  00000000  00000000  000c097c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000c3b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004748 	.word	0x08004748

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08004748 	.word	0x08004748

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b96a 	b.w	8000e10 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9d08      	ldr	r5, [sp, #32]
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14e      	bne.n	8000bfe <__udivmoddi4+0xaa>
 8000b60:	4694      	mov	ip, r2
 8000b62:	458c      	cmp	ip, r1
 8000b64:	4686      	mov	lr, r0
 8000b66:	fab2 f282 	clz	r2, r2
 8000b6a:	d962      	bls.n	8000c32 <__udivmoddi4+0xde>
 8000b6c:	b14a      	cbz	r2, 8000b82 <__udivmoddi4+0x2e>
 8000b6e:	f1c2 0320 	rsb	r3, r2, #32
 8000b72:	4091      	lsls	r1, r2
 8000b74:	fa20 f303 	lsr.w	r3, r0, r3
 8000b78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7c:	4319      	orrs	r1, r3
 8000b7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b86:	fa1f f68c 	uxth.w	r6, ip
 8000b8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b92:	fb07 1114 	mls	r1, r7, r4, r1
 8000b96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b9a:	fb04 f106 	mul.w	r1, r4, r6
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	d90a      	bls.n	8000bb8 <__udivmoddi4+0x64>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000baa:	f080 8112 	bcs.w	8000dd2 <__udivmoddi4+0x27e>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 810f 	bls.w	8000dd2 <__udivmoddi4+0x27e>
 8000bb4:	3c02      	subs	r4, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a59      	subs	r1, r3, r1
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb00 f606 	mul.w	r6, r0, r6
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x94>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bda:	f080 80fc 	bcs.w	8000dd6 <__udivmoddi4+0x282>
 8000bde:	429e      	cmp	r6, r3
 8000be0:	f240 80f9 	bls.w	8000dd6 <__udivmoddi4+0x282>
 8000be4:	4463      	add	r3, ip
 8000be6:	3802      	subs	r0, #2
 8000be8:	1b9b      	subs	r3, r3, r6
 8000bea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bee:	2100      	movs	r1, #0
 8000bf0:	b11d      	cbz	r5, 8000bfa <__udivmoddi4+0xa6>
 8000bf2:	40d3      	lsrs	r3, r2
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d905      	bls.n	8000c0e <__udivmoddi4+0xba>
 8000c02:	b10d      	cbz	r5, 8000c08 <__udivmoddi4+0xb4>
 8000c04:	e9c5 0100 	strd	r0, r1, [r5]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e7f5      	b.n	8000bfa <__udivmoddi4+0xa6>
 8000c0e:	fab3 f183 	clz	r1, r3
 8000c12:	2900      	cmp	r1, #0
 8000c14:	d146      	bne.n	8000ca4 <__udivmoddi4+0x150>
 8000c16:	42a3      	cmp	r3, r4
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xcc>
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	f0c0 80f0 	bcc.w	8000e00 <__udivmoddi4+0x2ac>
 8000c20:	1a86      	subs	r6, r0, r2
 8000c22:	eb64 0303 	sbc.w	r3, r4, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d0e6      	beq.n	8000bfa <__udivmoddi4+0xa6>
 8000c2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c30:	e7e3      	b.n	8000bfa <__udivmoddi4+0xa6>
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	f040 8090 	bne.w	8000d58 <__udivmoddi4+0x204>
 8000c38:	eba1 040c 	sub.w	r4, r1, ip
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	fa1f f78c 	uxth.w	r7, ip
 8000c44:	2101      	movs	r1, #1
 8000c46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c56:	fb07 f006 	mul.w	r0, r7, r6
 8000c5a:	4298      	cmp	r0, r3
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x11c>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x11a>
 8000c68:	4298      	cmp	r0, r3
 8000c6a:	f200 80cd 	bhi.w	8000e08 <__udivmoddi4+0x2b4>
 8000c6e:	4626      	mov	r6, r4
 8000c70:	1a1c      	subs	r4, r3, r0
 8000c72:	fa1f f38e 	uxth.w	r3, lr
 8000c76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c82:	fb00 f707 	mul.w	r7, r0, r7
 8000c86:	429f      	cmp	r7, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x148>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x146>
 8000c94:	429f      	cmp	r7, r3
 8000c96:	f200 80b0 	bhi.w	8000dfa <__udivmoddi4+0x2a6>
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	1bdb      	subs	r3, r3, r7
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	e7a5      	b.n	8000bf0 <__udivmoddi4+0x9c>
 8000ca4:	f1c1 0620 	rsb	r6, r1, #32
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	fa22 f706 	lsr.w	r7, r2, r6
 8000cae:	431f      	orrs	r7, r3
 8000cb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cb8:	ea43 030c 	orr.w	r3, r3, ip
 8000cbc:	40f4      	lsrs	r4, r6
 8000cbe:	fa00 f801 	lsl.w	r8, r0, r1
 8000cc2:	0c38      	lsrs	r0, r7, #16
 8000cc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cc8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cdc:	45a1      	cmp	r9, r4
 8000cde:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x1a6>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cea:	f080 8084 	bcs.w	8000df6 <__udivmoddi4+0x2a2>
 8000cee:	45a1      	cmp	r9, r4
 8000cf0:	f240 8081 	bls.w	8000df6 <__udivmoddi4+0x2a2>
 8000cf4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	eba4 0409 	sub.w	r4, r4, r9
 8000cfe:	fa1f f983 	uxth.w	r9, r3
 8000d02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d06:	fb00 4413 	mls	r4, r0, r3, r4
 8000d0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d12:	45a4      	cmp	ip, r4
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x1d2>
 8000d16:	193c      	adds	r4, r7, r4
 8000d18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d1c:	d267      	bcs.n	8000dee <__udivmoddi4+0x29a>
 8000d1e:	45a4      	cmp	ip, r4
 8000d20:	d965      	bls.n	8000dee <__udivmoddi4+0x29a>
 8000d22:	3b02      	subs	r3, #2
 8000d24:	443c      	add	r4, r7
 8000d26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d2e:	eba4 040c 	sub.w	r4, r4, ip
 8000d32:	429c      	cmp	r4, r3
 8000d34:	46ce      	mov	lr, r9
 8000d36:	469c      	mov	ip, r3
 8000d38:	d351      	bcc.n	8000dde <__udivmoddi4+0x28a>
 8000d3a:	d04e      	beq.n	8000dda <__udivmoddi4+0x286>
 8000d3c:	b155      	cbz	r5, 8000d54 <__udivmoddi4+0x200>
 8000d3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d42:	eb64 040c 	sbc.w	r4, r4, ip
 8000d46:	fa04 f606 	lsl.w	r6, r4, r6
 8000d4a:	40cb      	lsrs	r3, r1
 8000d4c:	431e      	orrs	r6, r3
 8000d4e:	40cc      	lsrs	r4, r1
 8000d50:	e9c5 6400 	strd	r6, r4, [r5]
 8000d54:	2100      	movs	r1, #0
 8000d56:	e750      	b.n	8000bfa <__udivmoddi4+0xa6>
 8000d58:	f1c2 0320 	rsb	r3, r2, #32
 8000d5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d64:	fa24 f303 	lsr.w	r3, r4, r3
 8000d68:	4094      	lsls	r4, r2
 8000d6a:	430c      	orrs	r4, r1
 8000d6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d86:	fb00 f107 	mul.w	r1, r0, r7
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x24c>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d96:	d22c      	bcs.n	8000df2 <__udivmoddi4+0x29e>
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d92a      	bls.n	8000df2 <__udivmoddi4+0x29e>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4463      	add	r3, ip
 8000da0:	1a5b      	subs	r3, r3, r1
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db0:	fb01 f307 	mul.w	r3, r1, r7
 8000db4:	42a3      	cmp	r3, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x276>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dc0:	d213      	bcs.n	8000dea <__udivmoddi4+0x296>
 8000dc2:	42a3      	cmp	r3, r4
 8000dc4:	d911      	bls.n	8000dea <__udivmoddi4+0x296>
 8000dc6:	3902      	subs	r1, #2
 8000dc8:	4464      	add	r4, ip
 8000dca:	1ae4      	subs	r4, r4, r3
 8000dcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd0:	e739      	b.n	8000c46 <__udivmoddi4+0xf2>
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	e6f0      	b.n	8000bb8 <__udivmoddi4+0x64>
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e706      	b.n	8000be8 <__udivmoddi4+0x94>
 8000dda:	45c8      	cmp	r8, r9
 8000ddc:	d2ae      	bcs.n	8000d3c <__udivmoddi4+0x1e8>
 8000dde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000de2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000de6:	3801      	subs	r0, #1
 8000de8:	e7a8      	b.n	8000d3c <__udivmoddi4+0x1e8>
 8000dea:	4631      	mov	r1, r6
 8000dec:	e7ed      	b.n	8000dca <__udivmoddi4+0x276>
 8000dee:	4603      	mov	r3, r0
 8000df0:	e799      	b.n	8000d26 <__udivmoddi4+0x1d2>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e7d4      	b.n	8000da0 <__udivmoddi4+0x24c>
 8000df6:	46d6      	mov	lr, sl
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1a6>
 8000dfa:	4463      	add	r3, ip
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	e74d      	b.n	8000c9c <__udivmoddi4+0x148>
 8000e00:	4606      	mov	r6, r0
 8000e02:	4623      	mov	r3, r4
 8000e04:	4608      	mov	r0, r1
 8000e06:	e70f      	b.n	8000c28 <__udivmoddi4+0xd4>
 8000e08:	3e02      	subs	r6, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	e730      	b.n	8000c70 <__udivmoddi4+0x11c>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <MPU6050_WriteRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//MPU6050
void MPU6050_WriteRegister(uint8_t reg, uint8_t data){ //Writes a single byte of data to a specific register in the MPU6050.
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	4613      	mov	r3, r2
 8000e22:	71bb      	strb	r3, [r7, #6]

	uint8_t buffer[2];
	buffer[0] = reg;  	//1.Send the register address.
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;   //2.Send the data to be written.
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 2, HAL_MAX_DELAY);  //3.For I2C, HAL_I2C_Master_Transmit() is used.
 8000e2c:	f107 020c 	add.w	r2, r7, #12
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2302      	movs	r3, #2
 8000e38:	21d0      	movs	r1, #208	@ 0xd0
 8000e3a:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <MPU6050_WriteRegister+0x34>)
 8000e3c:	f001 f918 	bl	8002070 <HAL_I2C_Master_Transmit>
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000002c 	.word	0x2000002c

08000e4c <MPU6050_ReadRegister>:

//Reads a single byte of data from a specific register in the MPU6050.
uint8_t MPU6050_ReadRegister(uint8_t reg){ //Write the register address.
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af04      	add	r7, sp, #16
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
	uint8_t data;   // Read a single byte from that register.
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY); //For I2C, HAL_I2C_Mem_Read() is used.
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	2301      	movs	r3, #1
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	f107 030f 	add.w	r3, r7, #15
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	21d0      	movs	r1, #208	@ 0xd0
 8000e6e:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <MPU6050_ReadRegister+0x34>)
 8000e70:	f001 f9fc 	bl	800226c <HAL_I2C_Mem_Read>

	return data;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000002c 	.word	0x2000002c

08000e84 <MPU6050_ReadAccel>:
void MPU6050_ReadRegisters(uint8_t reg, uint8_t *buffer, uint8_t length){ // Specify the starting register.  Read multiple bytes into a buffer.
  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, buffer, length, HAL_MAX_DELAY);
}

//Reads raw accelerometer data from the MPU6050 and converts it into 16-bit signed integers.
void MPU6050_ReadAccel(void){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 8000e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	2306      	movs	r3, #6
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	463b      	mov	r3, r7
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	223b      	movs	r2, #59	@ 0x3b
 8000e9c:	21d0      	movs	r1, #208	@ 0xd0
 8000e9e:	4826      	ldr	r0, [pc, #152]	@ (8000f38 <MPU6050_ReadAccel+0xb4>)
 8000ea0:	f001 f9e4 	bl	800226c <HAL_I2C_Mem_Read>
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000ea4:	783b      	ldrb	r3, [r7, #0]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	787b      	ldrb	r3, [r7, #1]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <MPU6050_ReadAccel+0xb8>)
 8000eb4:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000eb6:	78bb      	ldrb	r3, [r7, #2]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <MPU6050_ReadAccel+0xbc>)
 8000ec6:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000ec8:	793b      	ldrb	r3, [r7, #4]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	797b      	ldrb	r3, [r7, #5]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MPU6050_ReadAccel+0xc0>)
 8000ed8:	801a      	strh	r2, [r3, #0]
	Ax = (float)Accel_X_RAW/16384.0;
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MPU6050_ReadAccel+0xb8>)
 8000edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee0:	ee07 3a90 	vmov	s15, r3
 8000ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000f48 <MPU6050_ReadAccel+0xc4>
 8000eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <MPU6050_ReadAccel+0xc8>)
 8000ef2:	edc3 7a00 	vstr	s15, [r3]
	Ay = (float)Accel_Y_RAW/16384.0;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <MPU6050_ReadAccel+0xbc>)
 8000ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f04:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000f48 <MPU6050_ReadAccel+0xc4>
 8000f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0c:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <MPU6050_ReadAccel+0xcc>)
 8000f0e:	edc3 7a00 	vstr	s15, [r3]
	Az = (float)Accel_Z_RAW/16384.0;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MPU6050_ReadAccel+0xc0>)
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f20:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000f48 <MPU6050_ReadAccel+0xc4>
 8000f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <MPU6050_ReadAccel+0xd0>)
 8000f2a:	edc3 7a00 	vstr	s15, [r3]
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000002c 	.word	0x2000002c
 8000f3c:	20000120 	.word	0x20000120
 8000f40:	20000122 	.word	0x20000122
 8000f44:	20000124 	.word	0x20000124
 8000f48:	46800000 	.word	0x46800000
 8000f4c:	20000128 	.word	0x20000128
 8000f50:	2000012c 	.word	0x2000012c
 8000f54:	20000130 	.word	0x20000130

08000f58 <MPU6050_Init>:

void MPU6050_Init (void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	who_am_i =  MPU6050_ReadRegister(0x75);  // Read WHO_AM_I
 8000f5c:	2075      	movs	r0, #117	@ 0x75
 8000f5e:	f7ff ff75 	bl	8000e4c <MPU6050_ReadRegister>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MPU6050_Init+0x40>)
 8000f68:	701a      	strb	r2, [r3, #0]

    if (who_am_i == 0x68) {  // 0x68 will be returned by the sensor if everything goes well
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <MPU6050_Init+0x40>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b68      	cmp	r3, #104	@ 0x68
 8000f70:	d10f      	bne.n	8000f92 <MPU6050_Init+0x3a>
        // Power management register 0x6B: write 0 to wake the sensor up
        MPU6050_WriteRegister(0x6B, 0x00);
 8000f72:	2100      	movs	r1, #0
 8000f74:	206b      	movs	r0, #107	@ 0x6b
 8000f76:	f7ff ff4d 	bl	8000e14 <MPU6050_WriteRegister>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        MPU6050_WriteRegister(0x19, 0x07);
 8000f7a:	2107      	movs	r1, #7
 8000f7c:	2019      	movs	r0, #25
 8000f7e:	f7ff ff49 	bl	8000e14 <MPU6050_WriteRegister>

        // Set Accelerometer configuration in ACCEL_CONFIG Register
        MPU6050_WriteRegister(ACCEL_CONFIG_REG, 0x00);  // ± 2g
 8000f82:	2100      	movs	r1, #0
 8000f84:	201c      	movs	r0, #28
 8000f86:	f7ff ff45 	bl	8000e14 <MPU6050_WriteRegister>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        MPU6050_WriteRegister(GYRO_CONFIG_REG, 0x00);  // ± 250 °/s
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	201b      	movs	r0, #27
 8000f8e:	f7ff ff41 	bl	8000e14 <MPU6050_WriteRegister>
    }
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000134 	.word	0x20000134
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <Calculate_Tilt_Angle>:

float Calculate_Tilt_Angle(float a1, float a2) {
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000faa:	edc7 0a00 	vstr	s1, [r7]
    return atan2(a1, a2) * (180.0 / M_PI);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fa76 	bl	80004a0 <__aeabi_f2d>
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	460d      	mov	r5, r1
 8000fb8:	6838      	ldr	r0, [r7, #0]
 8000fba:	f7ff fa71 	bl	80004a0 <__aeabi_f2d>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	ec43 2b11 	vmov	d1, r2, r3
 8000fc6:	ec45 4b10 	vmov	d0, r4, r5
 8000fca:	f003 f953 	bl	8004274 <atan2>
 8000fce:	ec51 0b10 	vmov	r0, r1, d0
 8000fd2:	a309      	add	r3, pc, #36	@ (adr r3, 8000ff8 <Calculate_Tilt_Angle+0x58>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff faba 	bl	8000550 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fd4e 	bl	8000a84 <__aeabi_d2f>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	ee07 3a90 	vmov	s15, r3
}
 8000fee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff8:	1a63c1f8 	.word	0x1a63c1f8
 8000ffc:	404ca5dc 	.word	0x404ca5dc

08001000 <max7219_write>:



//*****DISPLAY 8x8 MATRIX******
void max7219_write (uint8_t Addr, uint8_t data)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
	uint16_t writeData = (Addr<<8)|data;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21b      	sxth	r3, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);  // enable slave
 8001022:	2200      	movs	r2, #0
 8001024:	2110      	movs	r1, #16
 8001026:	4809      	ldr	r0, [pc, #36]	@ (800104c <max7219_write+0x4c>)
 8001028:	f000 fec4 	bl	8001db4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&writeData, 1, 100);
 800102c:	f107 010e 	add.w	r1, r7, #14
 8001030:	2364      	movs	r3, #100	@ 0x64
 8001032:	2201      	movs	r2, #1
 8001034:	4806      	ldr	r0, [pc, #24]	@ (8001050 <max7219_write+0x50>)
 8001036:	f002 fc0c 	bl	8003852 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);  // disable slave
 800103a:	2201      	movs	r2, #1
 800103c:	2110      	movs	r1, #16
 800103e:	4803      	ldr	r0, [pc, #12]	@ (800104c <max7219_write+0x4c>)
 8001040:	f000 feb8 	bl	8001db4 <HAL_GPIO_WritePin>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40020000 	.word	0x40020000
 8001050:	20000080 	.word	0x20000080

08001054 <matrixInit>:

void matrixInit (void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	max7219_write(0x09, 0);  // no decoding
 8001058:	2100      	movs	r1, #0
 800105a:	2009      	movs	r0, #9
 800105c:	f7ff ffd0 	bl	8001000 <max7219_write>
	max7219_write(0x0a, 0x01);  // 3/32 intensity
 8001060:	2101      	movs	r1, #1
 8001062:	200a      	movs	r0, #10
 8001064:	f7ff ffcc 	bl	8001000 <max7219_write>
	max7219_write(0x0B, 0x07);  // scan all 7 columns
 8001068:	2107      	movs	r1, #7
 800106a:	200b      	movs	r0, #11
 800106c:	f7ff ffc8 	bl	8001000 <max7219_write>
	max7219_write(0x0C, 0x01);  // normal operation
 8001070:	2101      	movs	r1, #1
 8001072:	200c      	movs	r0, #12
 8001074:	f7ff ffc4 	bl	8001000 <max7219_write>
	max7219_write(0x0F, 0);     // No display test
 8001078:	2100      	movs	r1, #0
 800107a:	200f      	movs	r0, #15
 800107c:	f7ff ffc0 	bl	8001000 <max7219_write>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <Display_Tilt_Status>:

void Display_Tilt_Status(float ax, float ay, float az) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	ed87 0a03 	vstr	s0, [r7, #12]
 800108e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001092:	ed87 1a01 	vstr	s2, [r7, #4]
    static int8_t lastX = 3, lastY = 3; // Start at the center

    // Calculate tilt angles
    float angleX = Calculate_Tilt_Angle(ax, az);
 8001096:	edd7 0a01 	vldr	s1, [r7, #4]
 800109a:	ed97 0a03 	vldr	s0, [r7, #12]
 800109e:	f7ff ff7f 	bl	8000fa0 <Calculate_Tilt_Angle>
 80010a2:	ed87 0a06 	vstr	s0, [r7, #24]
    float angleY = Calculate_Tilt_Angle(ay, az);
 80010a6:	edd7 0a01 	vldr	s1, [r7, #4]
 80010aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80010ae:	f7ff ff77 	bl	8000fa0 <Calculate_Tilt_Angle>
 80010b2:	ed87 0a05 	vstr	s0, [r7, #20]

    // Map -90 to 90 degrees into 0 to 7 for the 8x8 grid
    int8_t displayX = (int8_t)((angleX + 45) / 90 * 8);
 80010b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ba:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001188 <Display_Tilt_Status+0x104>
 80010be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80010c2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800118c <Display_Tilt_Status+0x108>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80010ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d6:	edc7 7a00 	vstr	s15, [r7]
 80010da:	783b      	ldrb	r3, [r7, #0]
 80010dc:	74fb      	strb	r3, [r7, #19]
    int8_t displayY = (int8_t)((angleY + 45) / 90 * 8);
 80010de:	edd7 7a05 	vldr	s15, [r7, #20]
 80010e2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001188 <Display_Tilt_Status+0x104>
 80010e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80010ea:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800118c <Display_Tilt_Status+0x108>
 80010ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f2:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fe:	edc7 7a00 	vstr	s15, [r7]
 8001102:	783b      	ldrb	r3, [r7, #0]
 8001104:	74bb      	strb	r3, [r7, #18]

    // Clamp values to ensure they are within the 8x8 grid
    displayX = (displayX < 0) ? 0 : (displayX > 7) ? 7 : displayX;
 8001106:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db06      	blt.n	800111c <Display_Tilt_Status+0x98>
 800110e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001112:	2b07      	cmp	r3, #7
 8001114:	bfa8      	it	ge
 8001116:	2307      	movge	r3, #7
 8001118:	b25b      	sxtb	r3, r3
 800111a:	e000      	b.n	800111e <Display_Tilt_Status+0x9a>
 800111c:	2300      	movs	r3, #0
 800111e:	74fb      	strb	r3, [r7, #19]
    displayY = (displayY < 0) ? 0 : (displayY > 7) ? 7 : displayY;
 8001120:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db06      	blt.n	8001136 <Display_Tilt_Status+0xb2>
 8001128:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800112c:	2b07      	cmp	r3, #7
 800112e:	bfa8      	it	ge
 8001130:	2307      	movge	r3, #7
 8001132:	b25b      	sxtb	r3, r3
 8001134:	e000      	b.n	8001138 <Display_Tilt_Status+0xb4>
 8001136:	2300      	movs	r3, #0
 8001138:	74bb      	strb	r3, [r7, #18]

    // Clear the display
    for (int i = 1; i <= 8; i++) {
 800113a:	2301      	movs	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e008      	b.n	8001152 <Display_Tilt_Status+0xce>
        max7219_write(i, 0x00); // Turn off all LEDs
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff5a 	bl	8001000 <max7219_write>
    for (int i = 1; i <= 8; i++) {
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3301      	adds	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	2b08      	cmp	r3, #8
 8001156:	ddf3      	ble.n	8001140 <Display_Tilt_Status+0xbc>
    }

    // Light up the LED at (displayX, displayY)
    max7219_write(displayY + 1, 0x01 << displayX);
 8001158:	7cbb      	ldrb	r3, [r7, #18]
 800115a:	3301      	adds	r3, #1
 800115c:	b2da      	uxtb	r2, r3
 800115e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4619      	mov	r1, r3
 800116c:	4610      	mov	r0, r2
 800116e:	f7ff ff47 	bl	8001000 <max7219_write>

    // Update last valid position
    lastX = displayX;
 8001172:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <Display_Tilt_Status+0x10c>)
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	7013      	strb	r3, [r2, #0]
    lastY = displayY;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <Display_Tilt_Status+0x110>)
 800117a:	7cbb      	ldrb	r3, [r7, #18]
 800117c:	7013      	strb	r3, [r2, #0]
}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	42340000 	.word	0x42340000
 800118c:	42b40000 	.word	0x42b40000
 8001190:	20000000 	.word	0x20000000
 8001194:	20000001 	.word	0x20000001

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f000 fb0a 	bl	80017b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_I2C1_Init();
 80011a0:	f000 f898 	bl	80012d4 <MX_I2C1_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f82a 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f000 f924 	bl	80013f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ac:	f000 f8f8 	bl	80013a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011b0:	f000 f890 	bl	80012d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011b4:	f000 f8bc 	bl	8001330 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  matrixInit();
 80011b8:	f7ff ff4c 	bl	8001054 <matrixInit>
  MPU6050_Init();
 80011bc:	f7ff fecc 	bl	8000f58 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  //	max7219_write(1, 0b00011000);
	    MPU6050_ReadAccel();
 80011c0:	f7ff fe60 	bl	8000e84 <MPU6050_ReadAccel>
	    Display_Tilt_Status(Ax, Ay, Az);
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <main+0x58>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <main+0x5c>)
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <main+0x60>)
 80011d2:	edd3 6a00 	vldr	s13, [r3]
 80011d6:	eeb0 1a66 	vmov.f32	s2, s13
 80011da:	eef0 0a47 	vmov.f32	s1, s14
 80011de:	eeb0 0a67 	vmov.f32	s0, s15
 80011e2:	f7ff ff4f 	bl	8001084 <Display_Tilt_Status>
	    HAL_Delay(100);
 80011e6:	2064      	movs	r0, #100	@ 0x64
 80011e8:	f000 fb56 	bl	8001898 <HAL_Delay>
	    MPU6050_ReadAccel();
 80011ec:	bf00      	nop
 80011ee:	e7e7      	b.n	80011c0 <main+0x28>
 80011f0:	20000128 	.word	0x20000128
 80011f4:	2000012c 	.word	0x2000012c
 80011f8:	20000130 	.word	0x20000130

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	@ 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2230      	movs	r2, #48	@ 0x30
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f806 	bl	800421c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b29      	ldr	r3, [pc, #164]	@ (80012cc <SystemClock_Config+0xd0>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	4a28      	ldr	r2, [pc, #160]	@ (80012cc <SystemClock_Config+0xd0>)
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800122e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001230:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <SystemClock_Config+0xd0>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <SystemClock_Config+0xd4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001248:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <SystemClock_Config+0xd4>)
 800124a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <SystemClock_Config+0xd4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125c:	2302      	movs	r3, #2
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001260:	2301      	movs	r3, #1
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001264:	2310      	movs	r3, #16
 8001266:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001268:	2302      	movs	r3, #2
 800126a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126c:	2300      	movs	r3, #0
 800126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001270:	2310      	movs	r3, #16
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001274:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001278:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800127a:	2304      	movs	r3, #4
 800127c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800127e:	2307      	movs	r3, #7
 8001280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fdc2 	bl	8002e10 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001292:	f000 f91d 	bl	80014d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2302      	movs	r3, #2
 800129c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2102      	movs	r1, #2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 f824 	bl	8003300 <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012be:	f000 f907 	bl	80014d0 <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	3750      	adds	r7, #80	@ 0x50
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012da:	4a13      	ldr	r2, [pc, #76]	@ (8001328 <MX_I2C1_Init+0x54>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012e0:	4a12      	ldr	r2, [pc, #72]	@ (800132c <MX_I2C1_Init+0x58>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001304:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	@ (8001324 <MX_I2C1_Init+0x50>)
 8001312:	f000 fd69 	bl	8001de8 <HAL_I2C_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800131c:	f000 f8d8 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000002c 	.word	0x2000002c
 8001328:	40005400 	.word	0x40005400
 800132c:	000186a0 	.word	0x000186a0

08001330 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001334:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <MX_SPI1_Init+0x68>)
 8001336:	4a19      	ldr	r2, [pc, #100]	@ (800139c <MX_SPI1_Init+0x6c>)
 8001338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <MX_SPI1_Init+0x68>)
 800133c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <MX_SPI1_Init+0x68>)
 8001344:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001348:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800134a:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <MX_SPI1_Init+0x68>)
 800134c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001350:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_SPI1_Init+0x68>)
 8001354:	2202      	movs	r2, #2
 8001356:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_SPI1_Init+0x68>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_SPI1_Init+0x68>)
 8001360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_SPI1_Init+0x68>)
 8001368:	2220      	movs	r2, #32
 800136a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <MX_SPI1_Init+0x68>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_SPI1_Init+0x68>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001378:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <MX_SPI1_Init+0x68>)
 800137a:	2200      	movs	r2, #0
 800137c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_SPI1_Init+0x68>)
 8001380:	220a      	movs	r2, #10
 8001382:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_SPI1_Init+0x68>)
 8001386:	f002 f9db 	bl	8003740 <HAL_SPI_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001390:	f000 f89e 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000080 	.word	0x20000080
 800139c:	40013000 	.word	0x40013000

080013a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <MX_USART2_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d8:	f002 fc5c 	bl	8003c94 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f875 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000d8 	.word	0x200000d8
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b2d      	ldr	r3, [pc, #180]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a2c      	ldr	r2, [pc, #176]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b2a      	ldr	r3, [pc, #168]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a25      	ldr	r2, [pc, #148]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 8001430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a1e      	ldr	r2, [pc, #120]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <MX_GPIO_Init+0xd0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2110      	movs	r1, #16
 800147e:	4812      	ldr	r0, [pc, #72]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 8001480:	f000 fc98 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800148a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_GPIO_Init+0xd8>)
 800149c:	f000 fb06 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80014a0:	2310      	movs	r3, #16
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <MX_GPIO_Init+0xd4>)
 80014b8:	f000 faf8 	bl	8001aac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014bc:	bf00      	nop
 80014be:	3728      	adds	r7, #40	@ 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020800 	.word	0x40020800

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <Error_Handler+0x8>

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001528 <HAL_MspInit+0x4c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <HAL_MspInit+0x4c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	@ 0x40
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a19      	ldr	r2, [pc, #100]	@ (80015b0 <HAL_I2C_MspInit+0x84>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12c      	bne.n	80015a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <HAL_I2C_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <HAL_I2C_MspInit+0x88>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <HAL_I2C_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800156a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001570:	2312      	movs	r3, #18
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800157c:	2304      	movs	r3, #4
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <HAL_I2C_MspInit+0x8c>)
 8001588:	f000 fa90 	bl	8001aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <HAL_I2C_MspInit+0x88>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <HAL_I2C_MspInit+0x88>)
 8001596:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800159a:	6413      	str	r3, [r2, #64]	@ 0x40
 800159c:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <HAL_I2C_MspInit+0x88>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40005400 	.word	0x40005400
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020400 	.word	0x40020400

080015bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	@ (8001640 <HAL_SPI_MspInit+0x84>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12b      	bne.n	8001636 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_SPI_MspInit+0x88>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	4a17      	ldr	r2, [pc, #92]	@ (8001644 <HAL_SPI_MspInit+0x88>)
 80015e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_SPI_MspInit+0x88>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <HAL_SPI_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <HAL_SPI_MspInit+0x88>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <HAL_SPI_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001616:	23a0      	movs	r3, #160	@ 0xa0
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001626:	2305      	movs	r3, #5
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	@ (8001648 <HAL_SPI_MspInit+0x8c>)
 8001632:	f000 fa3b 	bl	8001aac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	@ 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40013000 	.word	0x40013000
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000

0800164c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	@ (80016d0 <HAL_UART_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12b      	bne.n	80016c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a17      	ldr	r2, [pc, #92]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 8001678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a10      	ldr	r2, [pc, #64]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016a6:	230c      	movs	r3, #12
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b6:	2307      	movs	r3, #7
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <HAL_UART_MspInit+0x8c>)
 80016c2:	f000 f9f3 	bl	8001aac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	@ 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004400 	.word	0x40004400
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <NMI_Handler+0x4>

080016e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <MemManage_Handler+0x4>

080016f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <UsageFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001732:	f000 f891 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	@ (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001798 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001764:	f7ff ffea 	bl	800173c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176a:	490d      	ldr	r1, [pc, #52]	@ (80017a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800176c:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001780:	4c0a      	ldr	r4, [pc, #40]	@ (80017ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800178e:	f002 fd4d 	bl	800422c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001792:	f7ff fd01 	bl	8001198 <main>
  bx  lr    
 8001796:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001798:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017a4:	080047f8 	.word	0x080047f8
  ldr r2, =_sbss
 80017a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017ac:	2000013c 	.word	0x2000013c

080017b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <HAL_Init+0x40>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <HAL_Init+0x40>)
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <HAL_Init+0x40>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f931 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fe78 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f93b 	bl	8001a92 <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f000 f911 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000004 	.word	0x20000004
 8001850:	2000000c 	.word	0x2000000c
 8001854:	20000008 	.word	0x20000008

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	2000000c 	.word	0x2000000c
 800187c:	20000138 	.word	0x20000138

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	@ (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000138 	.word	0x20000138

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000000c 	.word	0x2000000c

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	@ (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	@ (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f7ff ff8e 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff47 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff5c 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff8e 	bl	8001998 <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5d 	bl	8001944 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffb0 	bl	8001a00 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	@ 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	e159      	b.n	8001d7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f040 8148 	bne.w	8001d76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d005      	beq.n	8001afe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d130      	bne.n	8001b60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 0201 	and.w	r2, r3, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d017      	beq.n	8001b9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d123      	bne.n	8001bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	08da      	lsrs	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3208      	adds	r2, #8
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a2 	beq.w	8001d76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b57      	ldr	r3, [pc, #348]	@ (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	4a56      	ldr	r2, [pc, #344]	@ (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c42:	4b54      	ldr	r3, [pc, #336]	@ (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4e:	4a52      	ldr	r2, [pc, #328]	@ (8001d98 <HAL_GPIO_Init+0x2ec>)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a49      	ldr	r2, [pc, #292]	@ (8001d9c <HAL_GPIO_Init+0x2f0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_Init+0x202>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a48      	ldr	r2, [pc, #288]	@ (8001da0 <HAL_GPIO_Init+0x2f4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0x1fe>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a47      	ldr	r2, [pc, #284]	@ (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a46      	ldr	r2, [pc, #280]	@ (8001da8 <HAL_GPIO_Init+0x2fc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0x1f6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a45      	ldr	r2, [pc, #276]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_Init+0x1f2>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	e008      	b.n	8001cb0 <HAL_GPIO_Init+0x204>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x204>
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e004      	b.n	8001cb0 <HAL_GPIO_Init+0x204>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e002      	b.n	8001cb0 <HAL_GPIO_Init+0x204>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_GPIO_Init+0x204>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f002 0203 	and.w	r2, r2, #3
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	4093      	lsls	r3, r2
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc0:	4935      	ldr	r1, [pc, #212]	@ (8001d98 <HAL_GPIO_Init+0x2ec>)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cce:	4b38      	ldr	r3, [pc, #224]	@ (8001db0 <HAL_GPIO_Init+0x304>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8001db0 <HAL_GPIO_Init+0x304>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001db0 <HAL_GPIO_Init+0x304>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d1c:	4a24      	ldr	r2, [pc, #144]	@ (8001db0 <HAL_GPIO_Init+0x304>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d22:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <HAL_GPIO_Init+0x304>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d46:	4a1a      	ldr	r2, [pc, #104]	@ (8001db0 <HAL_GPIO_Init+0x304>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	@ (8001db0 <HAL_GPIO_Init+0x304>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d70:	4a0f      	ldr	r2, [pc, #60]	@ (8001db0 <HAL_GPIO_Init+0x304>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b0f      	cmp	r3, #15
 8001d80:	f67f aea2 	bls.w	8001ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3724      	adds	r7, #36	@ 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40013800 	.word	0x40013800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40013c00 	.word	0x40013c00

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e12b      	b.n	8002052 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fb8c 	bl	800152c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2224      	movs	r2, #36	@ 0x24
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e4c:	f001 fc50 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 8001e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a81      	ldr	r2, [pc, #516]	@ (800205c <HAL_I2C_Init+0x274>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d807      	bhi.n	8001e6c <HAL_I2C_Init+0x84>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a80      	ldr	r2, [pc, #512]	@ (8002060 <HAL_I2C_Init+0x278>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	bf94      	ite	ls
 8001e64:	2301      	movls	r3, #1
 8001e66:	2300      	movhi	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	e006      	b.n	8001e7a <HAL_I2C_Init+0x92>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4a7d      	ldr	r2, [pc, #500]	@ (8002064 <HAL_I2C_Init+0x27c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	bf94      	ite	ls
 8001e74:	2301      	movls	r3, #1
 8001e76:	2300      	movhi	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0e7      	b.n	8002052 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4a78      	ldr	r2, [pc, #480]	@ (8002068 <HAL_I2C_Init+0x280>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0c9b      	lsrs	r3, r3, #18
 8001e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a6a      	ldr	r2, [pc, #424]	@ (800205c <HAL_I2C_Init+0x274>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d802      	bhi.n	8001ebc <HAL_I2C_Init+0xd4>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	e009      	b.n	8001ed0 <HAL_I2C_Init+0xe8>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	4a69      	ldr	r2, [pc, #420]	@ (800206c <HAL_I2C_Init+0x284>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	099b      	lsrs	r3, r3, #6
 8001ece:	3301      	adds	r3, #1
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ee2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	495c      	ldr	r1, [pc, #368]	@ (800205c <HAL_I2C_Init+0x274>)
 8001eec:	428b      	cmp	r3, r1
 8001eee:	d819      	bhi.n	8001f24 <HAL_I2C_Init+0x13c>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e59      	subs	r1, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001efe:	1c59      	adds	r1, r3, #1
 8001f00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f04:	400b      	ands	r3, r1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_I2C_Init+0x138>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1e59      	subs	r1, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1e:	e051      	b.n	8001fc4 <HAL_I2C_Init+0x1dc>
 8001f20:	2304      	movs	r3, #4
 8001f22:	e04f      	b.n	8001fc4 <HAL_I2C_Init+0x1dc>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d111      	bne.n	8001f50 <HAL_I2C_Init+0x168>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1e58      	subs	r0, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	440b      	add	r3, r1
 8001f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e012      	b.n	8001f76 <HAL_I2C_Init+0x18e>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1e58      	subs	r0, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	0099      	lsls	r1, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f66:	3301      	adds	r3, #1
 8001f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_I2C_Init+0x196>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e022      	b.n	8001fc4 <HAL_I2C_Init+0x1dc>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10e      	bne.n	8001fa4 <HAL_I2C_Init+0x1bc>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1e58      	subs	r0, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	440b      	add	r3, r1
 8001f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fa2:	e00f      	b.n	8001fc4 <HAL_I2C_Init+0x1dc>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e58      	subs	r0, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	0099      	lsls	r1, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	6809      	ldr	r1, [r1, #0]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ff2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6911      	ldr	r1, [r2, #16]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68d2      	ldr	r2, [r2, #12]
 8001ffe:	4311      	orrs	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	430b      	orrs	r3, r1
 8002006:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	000186a0 	.word	0x000186a0
 8002060:	001e847f 	.word	0x001e847f
 8002064:	003d08ff 	.word	0x003d08ff
 8002068:	431bde83 	.word	0x431bde83
 800206c:	10624dd3 	.word	0x10624dd3

08002070 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	461a      	mov	r2, r3
 800207c:	460b      	mov	r3, r1
 800207e:	817b      	strh	r3, [r7, #10]
 8002080:	4613      	mov	r3, r2
 8002082:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff fbfc 	bl	8001880 <HAL_GetTick>
 8002088:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b20      	cmp	r3, #32
 8002094:	f040 80e0 	bne.w	8002258 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2319      	movs	r3, #25
 800209e:	2201      	movs	r2, #1
 80020a0:	4970      	ldr	r1, [pc, #448]	@ (8002264 <HAL_I2C_Master_Transmit+0x1f4>)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fc7e 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020ae:	2302      	movs	r3, #2
 80020b0:	e0d3      	b.n	800225a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_I2C_Master_Transmit+0x50>
 80020bc:	2302      	movs	r3, #2
 80020be:	e0cc      	b.n	800225a <HAL_I2C_Master_Transmit+0x1ea>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d007      	beq.n	80020e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0201 	orr.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2221      	movs	r2, #33	@ 0x21
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2210      	movs	r2, #16
 8002102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	893a      	ldrh	r2, [r7, #8]
 8002116:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a50      	ldr	r2, [pc, #320]	@ (8002268 <HAL_I2C_Master_Transmit+0x1f8>)
 8002126:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002128:	8979      	ldrh	r1, [r7, #10]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	6a3a      	ldr	r2, [r7, #32]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 face 	bl	80026d0 <I2C_MasterRequestWrite>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e08d      	b.n	800225a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002154:	e066      	b.n	8002224 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	6a39      	ldr	r1, [r7, #32]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fd3c 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	2b04      	cmp	r3, #4
 800216c:	d107      	bne.n	800217e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800217c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06b      	b.n	800225a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d11b      	bne.n	80021f8 <HAL_I2C_Master_Transmit+0x188>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d017      	beq.n	80021f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	6a39      	ldr	r1, [r7, #32]
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 fd33 	bl	8002c68 <I2C_WaitOnBTFFlagUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	2b04      	cmp	r3, #4
 800220e:	d107      	bne.n	8002220 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800221e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e01a      	b.n	800225a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	d194      	bne.n	8002156 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	00100002 	.word	0x00100002
 8002268:	ffff0000 	.word	0xffff0000

0800226c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	@ 0x30
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	461a      	mov	r2, r3
 800227a:	4603      	mov	r3, r0
 800227c:	817b      	strh	r3, [r7, #10]
 800227e:	460b      	mov	r3, r1
 8002280:	813b      	strh	r3, [r7, #8]
 8002282:	4613      	mov	r3, r2
 8002284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002286:	f7ff fafb 	bl	8001880 <HAL_GetTick>
 800228a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b20      	cmp	r3, #32
 8002296:	f040 8214 	bne.w	80026c2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2319      	movs	r3, #25
 80022a0:	2201      	movs	r2, #1
 80022a2:	497b      	ldr	r1, [pc, #492]	@ (8002490 <HAL_I2C_Mem_Read+0x224>)
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fb7d 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
 80022b2:	e207      	b.n	80026c4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_Mem_Read+0x56>
 80022be:	2302      	movs	r3, #2
 80022c0:	e200      	b.n	80026c4 <HAL_I2C_Mem_Read+0x458>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d007      	beq.n	80022e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2222      	movs	r2, #34	@ 0x22
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2240      	movs	r2, #64	@ 0x40
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a5b      	ldr	r2, [pc, #364]	@ (8002494 <HAL_I2C_Mem_Read+0x228>)
 8002328:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800232a:	88f8      	ldrh	r0, [r7, #6]
 800232c:	893a      	ldrh	r2, [r7, #8]
 800232e:	8979      	ldrh	r1, [r7, #10]
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4603      	mov	r3, r0
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fa4a 	bl	80027d4 <I2C_RequestMemoryRead>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e1bc      	b.n	80026c4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	d113      	bne.n	800237a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e190      	b.n	800269c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	2b01      	cmp	r3, #1
 8002380:	d11b      	bne.n	80023ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e170      	b.n	800269c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d11b      	bne.n	80023fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	e150      	b.n	800269c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002410:	e144      	b.n	800269c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002416:	2b03      	cmp	r3, #3
 8002418:	f200 80f1 	bhi.w	80025fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002420:	2b01      	cmp	r3, #1
 8002422:	d123      	bne.n	800246c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002426:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fc65 	bl	8002cf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e145      	b.n	80026c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800246a:	e117      	b.n	800269c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	2b02      	cmp	r3, #2
 8002472:	d14e      	bne.n	8002512 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247a:	2200      	movs	r2, #0
 800247c:	4906      	ldr	r1, [pc, #24]	@ (8002498 <HAL_I2C_Mem_Read+0x22c>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa90 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e11a      	b.n	80026c4 <HAL_I2C_Mem_Read+0x458>
 800248e:	bf00      	nop
 8002490:	00100002 	.word	0x00100002
 8002494:	ffff0000 	.word	0xffff0000
 8002498:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002510:	e0c4      	b.n	800269c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002518:	2200      	movs	r2, #0
 800251a:	496c      	ldr	r1, [pc, #432]	@ (80026cc <HAL_I2C_Mem_Read+0x460>)
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fa41 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0cb      	b.n	80026c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800253a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002574:	2200      	movs	r2, #0
 8002576:	4955      	ldr	r1, [pc, #340]	@ (80026cc <HAL_I2C_Mem_Read+0x460>)
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fa13 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e09d      	b.n	80026c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025fc:	e04e      	b.n	800269c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002600:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fb78 	bl	8002cf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e058      	b.n	80026c4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d124      	bne.n	800269c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002656:	2b03      	cmp	r3, #3
 8002658:	d107      	bne.n	800266a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002668:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f aeb6 	bne.w	8002412 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
  }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3728      	adds	r7, #40	@ 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	00010004 	.word	0x00010004

080026d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	460b      	mov	r3, r1
 80026de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d006      	beq.n	80026fa <I2C_MasterRequestWrite+0x2a>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d003      	beq.n	80026fa <I2C_MasterRequestWrite+0x2a>
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026f8:	d108      	bne.n	800270c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e00b      	b.n	8002724 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	2b12      	cmp	r3, #18
 8002712:	d107      	bne.n	8002724 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002722:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f937 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00d      	beq.n	8002758 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800274a:	d103      	bne.n	8002754 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002752:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e035      	b.n	80027c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002760:	d108      	bne.n	8002774 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	e01b      	b.n	80027ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002774:	897b      	ldrh	r3, [r7, #10]
 8002776:	11db      	asrs	r3, r3, #7
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 0306 	and.w	r3, r3, #6
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f063 030f 	orn	r3, r3, #15
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	490e      	ldr	r1, [pc, #56]	@ (80027cc <I2C_MasterRequestWrite+0xfc>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f980 	bl	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e010      	b.n	80027c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4907      	ldr	r1, [pc, #28]	@ (80027d0 <I2C_MasterRequestWrite+0x100>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f970 	bl	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	00010008 	.word	0x00010008
 80027d0:	00010002 	.word	0x00010002

080027d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	4608      	mov	r0, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	4603      	mov	r3, r0
 80027e4:	817b      	strh	r3, [r7, #10]
 80027e6:	460b      	mov	r3, r1
 80027e8:	813b      	strh	r3, [r7, #8]
 80027ea:	4613      	mov	r3, r2
 80027ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800280c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	2200      	movs	r2, #0
 8002816:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f8c2 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002834:	d103      	bne.n	800283e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0aa      	b.n	8002998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002842:	897b      	ldrh	r3, [r7, #10]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002850:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	4952      	ldr	r1, [pc, #328]	@ (80029a0 <I2C_RequestMemoryRead+0x1cc>)
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f91d 	bl	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e097      	b.n	8002998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800287e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f9a8 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	2b04      	cmp	r3, #4
 8002894:	d107      	bne.n	80028a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e076      	b.n	8002998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b0:	893b      	ldrh	r3, [r7, #8]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	e021      	b.n	8002900 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028cc:	6a39      	ldr	r1, [r7, #32]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f982 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00d      	beq.n	80028f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d107      	bne.n	80028f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e050      	b.n	8002998 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028f6:	893b      	ldrh	r3, [r7, #8]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002902:	6a39      	ldr	r1, [r7, #32]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f967 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	2b04      	cmp	r3, #4
 8002916:	d107      	bne.n	8002928 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002926:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e035      	b.n	8002998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800293a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	2200      	movs	r2, #0
 8002944:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f82b 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00d      	beq.n	8002970 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002962:	d103      	bne.n	800296c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800296a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e013      	b.n	8002998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002970:	897b      	ldrh	r3, [r7, #10]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	6a3a      	ldr	r2, [r7, #32]
 8002984:	4906      	ldr	r1, [pc, #24]	@ (80029a0 <I2C_RequestMemoryRead+0x1cc>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f886 	bl	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	00010002 	.word	0x00010002

080029a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b4:	e048      	b.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d044      	beq.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7fe ff5f 	bl	8001880 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d139      	bne.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d10d      	bne.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	43da      	mvns	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4013      	ands	r3, r2
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	e00c      	b.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	43da      	mvns	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	4013      	ands	r3, r2
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d116      	bne.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e023      	b.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	0c1b      	lsrs	r3, r3, #16
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d10d      	bne.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	43da      	mvns	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	e00c      	b.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	43da      	mvns	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d093      	beq.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa6:	e071      	b.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab6:	d123      	bne.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e067      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d041      	beq.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7fe feba 	bl	8001880 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d136      	bne.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10c      	bne.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e00b      	b.n	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e021      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10c      	bne.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	43da      	mvns	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e00b      	b.n	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f47f af6d 	bne.w	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be4:	e034      	b.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8e3 	bl	8002db2 <I2C_IsAcknowledgeFailed>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e034      	b.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d028      	beq.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfe:	f7fe fe3f 	bl	8001880 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d11d      	bne.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1e:	2b80      	cmp	r3, #128	@ 0x80
 8002c20:	d016      	beq.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e007      	b.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5a:	2b80      	cmp	r3, #128	@ 0x80
 8002c5c:	d1c3      	bne.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c74:	e034      	b.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f89b 	bl	8002db2 <I2C_IsAcknowledgeFailed>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e034      	b.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d028      	beq.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7fe fdf7 	bl	8001880 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11d      	bne.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d016      	beq.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e007      	b.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d1c3      	bne.n	8002c76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d04:	e049      	b.n	8002d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d119      	bne.n	8002d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0210 	mvn.w	r2, #16
 8002d1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e030      	b.n	8002daa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d48:	f7fe fd9a 	bl	8001880 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d302      	bcc.n	8002d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d11d      	bne.n	8002d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d68:	2b40      	cmp	r3, #64	@ 0x40
 8002d6a:	d016      	beq.n	8002d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f043 0220 	orr.w	r2, r3, #32
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e007      	b.n	8002daa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da4:	2b40      	cmp	r3, #64	@ 0x40
 8002da6:	d1ae      	bne.n	8002d06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc8:	d11b      	bne.n	8002e02 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dd2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f043 0204 	orr.w	r2, r3, #4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e267      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d075      	beq.n	8002f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e2e:	4b88      	ldr	r3, [pc, #544]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d00c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3a:	4b85      	ldr	r3, [pc, #532]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d112      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e46:	4b82      	ldr	r3, [pc, #520]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e52:	d10b      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	4b7e      	ldr	r3, [pc, #504]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d05b      	beq.n	8002f18 <HAL_RCC_OscConfig+0x108>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d157      	bne.n	8002f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e242      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e74:	d106      	bne.n	8002e84 <HAL_RCC_OscConfig+0x74>
 8002e76:	4b76      	ldr	r3, [pc, #472]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a75      	ldr	r2, [pc, #468]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e01d      	b.n	8002ec0 <HAL_RCC_OscConfig+0xb0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x98>
 8002e8e:	4b70      	ldr	r3, [pc, #448]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a6f      	ldr	r2, [pc, #444]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0xb0>
 8002ea8:	4b69      	ldr	r3, [pc, #420]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a68      	ldr	r2, [pc, #416]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b66      	ldr	r3, [pc, #408]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a65      	ldr	r2, [pc, #404]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fcda 	bl	8001880 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fcd6 	bl	8001880 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	@ 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e207      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xc0>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fcc6 	bl	8001880 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fcc2 	bl	8001880 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	@ 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1f3      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	4b51      	ldr	r3, [pc, #324]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0xe8>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d063      	beq.n	8002fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f26:	4b4a      	ldr	r3, [pc, #296]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f32:	4b47      	ldr	r3, [pc, #284]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d11c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b44      	ldr	r3, [pc, #272]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_RCC_OscConfig+0x152>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1c7      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f62:	4b3b      	ldr	r3, [pc, #236]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4937      	ldr	r1, [pc, #220]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	e03a      	b.n	8002fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f80:	4b34      	ldr	r3, [pc, #208]	@ (8003054 <HAL_RCC_OscConfig+0x244>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe fc7b 	bl	8001880 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fc77 	bl	8001880 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e1a8      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b28      	ldr	r3, [pc, #160]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4925      	ldr	r1, [pc, #148]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <HAL_RCC_OscConfig+0x244>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fc5a 	bl	8001880 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fc56 	bl	8001880 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e187      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d036      	beq.n	8003068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003002:	4b15      	ldr	r3, [pc, #84]	@ (8003058 <HAL_RCC_OscConfig+0x248>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe fc3a 	bl	8001880 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7fe fc36 	bl	8001880 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e167      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_RCC_OscConfig+0x240>)
 8003024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x200>
 800302e:	e01b      	b.n	8003068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003030:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <HAL_RCC_OscConfig+0x248>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7fe fc23 	bl	8001880 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303c:	e00e      	b.n	800305c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303e:	f7fe fc1f 	bl	8001880 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d907      	bls.n	800305c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e150      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
 8003050:	40023800 	.word	0x40023800
 8003054:	42470000 	.word	0x42470000
 8003058:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	4b88      	ldr	r3, [pc, #544]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 800305e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ea      	bne.n	800303e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8097 	beq.w	80031a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307a:	4b81      	ldr	r3, [pc, #516]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	4b7d      	ldr	r3, [pc, #500]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	4a7c      	ldr	r2, [pc, #496]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003094:	6413      	str	r3, [r2, #64]	@ 0x40
 8003096:	4b7a      	ldr	r3, [pc, #488]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b77      	ldr	r3, [pc, #476]	@ (8003284 <HAL_RCC_OscConfig+0x474>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d118      	bne.n	80030e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b2:	4b74      	ldr	r3, [pc, #464]	@ (8003284 <HAL_RCC_OscConfig+0x474>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a73      	ldr	r2, [pc, #460]	@ (8003284 <HAL_RCC_OscConfig+0x474>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7fe fbdf 	bl	8001880 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7fe fbdb 	bl	8001880 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e10c      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003284 <HAL_RCC_OscConfig+0x474>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x2ea>
 80030ec:	4b64      	ldr	r3, [pc, #400]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f0:	4a63      	ldr	r2, [pc, #396]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f8:	e01c      	b.n	8003134 <HAL_RCC_OscConfig+0x324>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x30c>
 8003102:	4b5f      	ldr	r3, [pc, #380]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	4a5e      	ldr	r2, [pc, #376]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6713      	str	r3, [r2, #112]	@ 0x70
 800310e:	4b5c      	ldr	r3, [pc, #368]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	4a5b      	ldr	r2, [pc, #364]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6713      	str	r3, [r2, #112]	@ 0x70
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0x324>
 800311c:	4b58      	ldr	r3, [pc, #352]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003120:	4a57      	ldr	r2, [pc, #348]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	6713      	str	r3, [r2, #112]	@ 0x70
 8003128:	4b55      	ldr	r3, [pc, #340]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	4a54      	ldr	r2, [pc, #336]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 800312e:	f023 0304 	bic.w	r3, r3, #4
 8003132:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fba0 	bl	8001880 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003142:	e00a      	b.n	800315a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7fe fb9c 	bl	8001880 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e0cb      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315a:	4b49      	ldr	r3, [pc, #292]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ee      	beq.n	8003144 <HAL_RCC_OscConfig+0x334>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003168:	f7fe fb8a 	bl	8001880 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe fb86 	bl	8001880 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0b5      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003186:	4b3e      	ldr	r3, [pc, #248]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ee      	bne.n	8003170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003192:	7dfb      	ldrb	r3, [r7, #23]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003198:	4b39      	ldr	r3, [pc, #228]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	4a38      	ldr	r2, [pc, #224]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 800319e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80a1 	beq.w	80032f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ae:	4b34      	ldr	r3, [pc, #208]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d05c      	beq.n	8003274 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d141      	bne.n	8003246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b31      	ldr	r3, [pc, #196]	@ (8003288 <HAL_RCC_OscConfig+0x478>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe fb5a 	bl	8001880 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe fb56 	bl	8001880 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e087      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	4b27      	ldr	r3, [pc, #156]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	019b      	lsls	r3, r3, #6
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	3b01      	subs	r3, #1
 8003208:	041b      	lsls	r3, r3, #16
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	491b      	ldr	r1, [pc, #108]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003218:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <HAL_RCC_OscConfig+0x478>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7fe fb2f 	bl	8001880 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003226:	f7fe fb2b 	bl	8001880 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e05c      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	4b11      	ldr	r3, [pc, #68]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x416>
 8003244:	e054      	b.n	80032f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003246:	4b10      	ldr	r3, [pc, #64]	@ (8003288 <HAL_RCC_OscConfig+0x478>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fe fb18 	bl	8001880 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7fe fb14 	bl	8001880 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e045      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <HAL_RCC_OscConfig+0x470>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x444>
 8003272:	e03d      	b.n	80032f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d107      	bne.n	800328c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e038      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
 8003280:	40023800 	.word	0x40023800
 8003284:	40007000 	.word	0x40007000
 8003288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800328c:	4b1b      	ldr	r3, [pc, #108]	@ (80032fc <HAL_RCC_OscConfig+0x4ec>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d028      	beq.n	80032ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d121      	bne.n	80032ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d11a      	bne.n	80032ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032bc:	4013      	ands	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d111      	bne.n	80032ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	3b01      	subs	r3, #1
 80032d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800

08003300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0cc      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003314:	4b68      	ldr	r3, [pc, #416]	@ (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d90c      	bls.n	800333c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b65      	ldr	r3, [pc, #404]	@ (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b63      	ldr	r3, [pc, #396]	@ (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0b8      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d020      	beq.n	800338a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003354:	4b59      	ldr	r3, [pc, #356]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a58      	ldr	r2, [pc, #352]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800335e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800336c:	4b53      	ldr	r3, [pc, #332]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a52      	ldr	r2, [pc, #328]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003378:	4b50      	ldr	r3, [pc, #320]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	494d      	ldr	r1, [pc, #308]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d044      	beq.n	8003420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d107      	bne.n	80033ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	4b47      	ldr	r3, [pc, #284]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d119      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e07f      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d003      	beq.n	80033be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	4b3f      	ldr	r3, [pc, #252]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e06f      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ce:	4b3b      	ldr	r3, [pc, #236]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e067      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4b37      	ldr	r3, [pc, #220]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4934      	ldr	r1, [pc, #208]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fa46 	bl	8001880 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	e00a      	b.n	800340e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7fe fa42 	bl	8001880 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e04f      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	4b2b      	ldr	r3, [pc, #172]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 020c 	and.w	r2, r3, #12
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	429a      	cmp	r2, r3
 800341e:	d1eb      	bne.n	80033f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003420:	4b25      	ldr	r3, [pc, #148]	@ (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d20c      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b22      	ldr	r3, [pc, #136]	@ (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b20      	ldr	r3, [pc, #128]	@ (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e032      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003454:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4916      	ldr	r1, [pc, #88]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003472:	4b12      	ldr	r3, [pc, #72]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	490e      	ldr	r1, [pc, #56]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003486:	f000 f821 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 800348a:	4602      	mov	r2, r0
 800348c:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	490a      	ldr	r1, [pc, #40]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	5ccb      	ldrb	r3, [r1, r3]
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	4a09      	ldr	r2, [pc, #36]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034a2:	4b09      	ldr	r3, [pc, #36]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe f9a6 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023c00 	.word	0x40023c00
 80034bc:	40023800 	.word	0x40023800
 80034c0:	08004760 	.word	0x08004760
 80034c4:	20000004 	.word	0x20000004
 80034c8:	20000008 	.word	0x20000008

080034cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d0:	b094      	sub	sp, #80	@ 0x50
 80034d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e4:	4b79      	ldr	r3, [pc, #484]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d00d      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x40>
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	f200 80e1 	bhi.w	80036b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x34>
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x3a>
 80034fe:	e0db      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003500:	4b73      	ldr	r3, [pc, #460]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003502:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003504:	e0db      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003506:	4b73      	ldr	r3, [pc, #460]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003508:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800350a:	e0d8      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800350c:	4b6f      	ldr	r3, [pc, #444]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003514:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003516:	4b6d      	ldr	r3, [pc, #436]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d063      	beq.n	80035ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003522:	4b6a      	ldr	r3, [pc, #424]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	099b      	lsrs	r3, r3, #6
 8003528:	2200      	movs	r2, #0
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800352c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800352e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003534:	633b      	str	r3, [r7, #48]	@ 0x30
 8003536:	2300      	movs	r3, #0
 8003538:	637b      	str	r3, [r7, #52]	@ 0x34
 800353a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800353e:	4622      	mov	r2, r4
 8003540:	462b      	mov	r3, r5
 8003542:	f04f 0000 	mov.w	r0, #0
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	0159      	lsls	r1, r3, #5
 800354c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003550:	0150      	lsls	r0, r2, #5
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4621      	mov	r1, r4
 8003558:	1a51      	subs	r1, r2, r1
 800355a:	6139      	str	r1, [r7, #16]
 800355c:	4629      	mov	r1, r5
 800355e:	eb63 0301 	sbc.w	r3, r3, r1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003570:	4659      	mov	r1, fp
 8003572:	018b      	lsls	r3, r1, #6
 8003574:	4651      	mov	r1, sl
 8003576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800357a:	4651      	mov	r1, sl
 800357c:	018a      	lsls	r2, r1, #6
 800357e:	4651      	mov	r1, sl
 8003580:	ebb2 0801 	subs.w	r8, r2, r1
 8003584:	4659      	mov	r1, fp
 8003586:	eb63 0901 	sbc.w	r9, r3, r1
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800359a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800359e:	4690      	mov	r8, r2
 80035a0:	4699      	mov	r9, r3
 80035a2:	4623      	mov	r3, r4
 80035a4:	eb18 0303 	adds.w	r3, r8, r3
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	462b      	mov	r3, r5
 80035ac:	eb49 0303 	adc.w	r3, r9, r3
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035be:	4629      	mov	r1, r5
 80035c0:	024b      	lsls	r3, r1, #9
 80035c2:	4621      	mov	r1, r4
 80035c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035c8:	4621      	mov	r1, r4
 80035ca:	024a      	lsls	r2, r1, #9
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d2:	2200      	movs	r2, #0
 80035d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035dc:	f7fd faa2 	bl	8000b24 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4613      	mov	r3, r2
 80035e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035e8:	e058      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ea:	4b38      	ldr	r3, [pc, #224]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	2200      	movs	r2, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	4611      	mov	r1, r2
 80035f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035fa:	623b      	str	r3, [r7, #32]
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003600:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003604:	4642      	mov	r2, r8
 8003606:	464b      	mov	r3, r9
 8003608:	f04f 0000 	mov.w	r0, #0
 800360c:	f04f 0100 	mov.w	r1, #0
 8003610:	0159      	lsls	r1, r3, #5
 8003612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003616:	0150      	lsls	r0, r2, #5
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4641      	mov	r1, r8
 800361e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003622:	4649      	mov	r1, r9
 8003624:	eb63 0b01 	sbc.w	fp, r3, r1
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003634:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003638:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800363c:	ebb2 040a 	subs.w	r4, r2, sl
 8003640:	eb63 050b 	sbc.w	r5, r3, fp
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	00eb      	lsls	r3, r5, #3
 800364e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003652:	00e2      	lsls	r2, r4, #3
 8003654:	4614      	mov	r4, r2
 8003656:	461d      	mov	r5, r3
 8003658:	4643      	mov	r3, r8
 800365a:	18e3      	adds	r3, r4, r3
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	464b      	mov	r3, r9
 8003660:	eb45 0303 	adc.w	r3, r5, r3
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003672:	4629      	mov	r1, r5
 8003674:	028b      	lsls	r3, r1, #10
 8003676:	4621      	mov	r1, r4
 8003678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800367c:	4621      	mov	r1, r4
 800367e:	028a      	lsls	r2, r1, #10
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003686:	2200      	movs	r2, #0
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	61fa      	str	r2, [r7, #28]
 800368c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003690:	f7fd fa48 	bl	8000b24 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4613      	mov	r3, r2
 800369a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	3301      	adds	r3, #1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036b6:	e002      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3750      	adds	r7, #80	@ 0x50
 80036c4:	46bd      	mov	sp, r7
 80036c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	00f42400 	.word	0x00f42400
 80036d4:	007a1200 	.word	0x007a1200

080036d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036dc:	4b03      	ldr	r3, [pc, #12]	@ (80036ec <HAL_RCC_GetHCLKFreq+0x14>)
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000004 	.word	0x20000004

080036f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036f4:	f7ff fff0 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	0a9b      	lsrs	r3, r3, #10
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	4903      	ldr	r1, [pc, #12]	@ (8003714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40023800 	.word	0x40023800
 8003714:	08004770 	.word	0x08004770

08003718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800371c:	f7ff ffdc 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	0b5b      	lsrs	r3, r3, #13
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4903      	ldr	r1, [pc, #12]	@ (800373c <HAL_RCC_GetPCLK2Freq+0x24>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40023800 	.word	0x40023800
 800373c:	08004770 	.word	0x08004770

08003740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07b      	b.n	800384a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d108      	bne.n	800376c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003762:	d009      	beq.n	8003778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	61da      	str	r2, [r3, #28]
 800376a:	e005      	b.n	8003778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd ff12 	bl	80015bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fc:	ea42 0103 	orr.w	r1, r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f003 0104 	and.w	r1, r3, #4
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	f003 0210 	and.w	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b088      	sub	sp, #32
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003862:	f7fe f80d 	bl	8001880 <HAL_GetTick>
 8003866:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d001      	beq.n	800387c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
 800387a:	e12a      	b.n	8003ad2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_SPI_Transmit+0x36>
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e122      	b.n	8003ad2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_SPI_Transmit+0x48>
 8003896:	2302      	movs	r3, #2
 8003898:	e11b      	b.n	8003ad2 <HAL_SPI_Transmit+0x280>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2203      	movs	r2, #3
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e8:	d10f      	bne.n	800390a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003908:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003914:	2b40      	cmp	r3, #64	@ 0x40
 8003916:	d007      	beq.n	8003928 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003930:	d152      	bne.n	80039d8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_SPI_Transmit+0xee>
 800393a:	8b7b      	ldrh	r3, [r7, #26]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d145      	bne.n	80039cc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003964:	e032      	b.n	80039cc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b02      	cmp	r3, #2
 8003972:	d112      	bne.n	800399a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003998:	e018      	b.n	80039cc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800399a:	f7fd ff71 	bl	8001880 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d803      	bhi.n	80039b2 <HAL_SPI_Transmit+0x160>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d102      	bne.n	80039b8 <HAL_SPI_Transmit+0x166>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e082      	b.n	8003ad2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1c7      	bne.n	8003966 <HAL_SPI_Transmit+0x114>
 80039d6:	e053      	b.n	8003a80 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_SPI_Transmit+0x194>
 80039e0:	8b7b      	ldrh	r3, [r7, #26]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d147      	bne.n	8003a76 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a0c:	e033      	b.n	8003a76 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d113      	bne.n	8003a44 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	330c      	adds	r3, #12
 8003a26:	7812      	ldrb	r2, [r2, #0]
 8003a28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a42:	e018      	b.n	8003a76 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a44:	f7fd ff1c 	bl	8001880 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d803      	bhi.n	8003a5c <HAL_SPI_Transmit+0x20a>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d102      	bne.n	8003a62 <HAL_SPI_Transmit+0x210>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e02d      	b.n	8003ad2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1c6      	bne.n	8003a0e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	6839      	ldr	r1, [r7, #0]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f8b1 	bl	8003bec <SPI_EndRxTxTransaction>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003aec:	f7fd fec8 	bl	8001880 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003afc:	f7fd fec0 	bl	8001880 <HAL_GetTick>
 8003b00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b02:	4b39      	ldr	r3, [pc, #228]	@ (8003be8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	015b      	lsls	r3, r3, #5
 8003b08:	0d1b      	lsrs	r3, r3, #20
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b12:	e054      	b.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d050      	beq.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b1c:	f7fd feb0 	bl	8001880 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d902      	bls.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d13d      	bne.n	8003bae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b4a:	d111      	bne.n	8003b70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b54:	d004      	beq.n	8003b60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5e:	d107      	bne.n	8003b70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b78:	d10f      	bne.n	8003b9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e017      	b.n	8003bde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d19b      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000004 	.word	0x20000004

08003bec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	2102      	movs	r1, #2
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f7ff ff6a 	bl	8003adc <SPI_WaitFlagStateUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c12:	f043 0220 	orr.w	r2, r3, #32
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e032      	b.n	8003c84 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c8c <SPI_EndRxTxTransaction+0xa0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <SPI_EndRxTxTransaction+0xa4>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	0d5b      	lsrs	r3, r3, #21
 8003c2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c3c:	d112      	bne.n	8003c64 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2200      	movs	r2, #0
 8003c46:	2180      	movs	r1, #128	@ 0x80
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff ff47 	bl	8003adc <SPI_WaitFlagStateUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d016      	beq.n	8003c82 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e00f      	b.n	8003c84 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7a:	2b80      	cmp	r3, #128	@ 0x80
 8003c7c:	d0f2      	beq.n	8003c64 <SPI_EndRxTxTransaction+0x78>
 8003c7e:	e000      	b.n	8003c82 <SPI_EndRxTxTransaction+0x96>
        break;
 8003c80:	bf00      	nop
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000004 	.word	0x20000004
 8003c90:	165e9f81 	.word	0x165e9f81

08003c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e042      	b.n	8003d2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd fcc6 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	@ 0x24
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f82b 	bl	8003d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d38:	b0c0      	sub	sp, #256	@ 0x100
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	68d9      	ldr	r1, [r3, #12]
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	ea40 0301 	orr.w	r3, r0, r1
 8003d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d8c:	f021 010c 	bic.w	r1, r1, #12
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dae:	6999      	ldr	r1, [r3, #24]
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	ea40 0301 	orr.w	r3, r0, r1
 8003dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4b8f      	ldr	r3, [pc, #572]	@ (8004000 <UART_SetConfig+0x2cc>)
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d005      	beq.n	8003dd4 <UART_SetConfig+0xa0>
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4b8d      	ldr	r3, [pc, #564]	@ (8004004 <UART_SetConfig+0x2d0>)
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d104      	bne.n	8003dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd4:	f7ff fca0 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8003dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ddc:	e003      	b.n	8003de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dde:	f7ff fc87 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 8003de2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df0:	f040 810c 	bne.w	800400c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e06:	4622      	mov	r2, r4
 8003e08:	462b      	mov	r3, r5
 8003e0a:	1891      	adds	r1, r2, r2
 8003e0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e0e:	415b      	adcs	r3, r3
 8003e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e16:	4621      	mov	r1, r4
 8003e18:	eb12 0801 	adds.w	r8, r2, r1
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	eb43 0901 	adc.w	r9, r3, r1
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e36:	4690      	mov	r8, r2
 8003e38:	4699      	mov	r9, r3
 8003e3a:	4623      	mov	r3, r4
 8003e3c:	eb18 0303 	adds.w	r3, r8, r3
 8003e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e44:	462b      	mov	r3, r5
 8003e46:	eb49 0303 	adc.w	r3, r9, r3
 8003e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e62:	460b      	mov	r3, r1
 8003e64:	18db      	adds	r3, r3, r3
 8003e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e68:	4613      	mov	r3, r2
 8003e6a:	eb42 0303 	adc.w	r3, r2, r3
 8003e6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e78:	f7fc fe54 	bl	8000b24 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4b61      	ldr	r3, [pc, #388]	@ (8004008 <UART_SetConfig+0x2d4>)
 8003e82:	fba3 2302 	umull	r2, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	011c      	lsls	r4, r3, #4
 8003e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	1891      	adds	r1, r2, r2
 8003ea2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ea4:	415b      	adcs	r3, r3
 8003ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003eac:	4641      	mov	r1, r8
 8003eae:	eb12 0a01 	adds.w	sl, r2, r1
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ecc:	4692      	mov	sl, r2
 8003ece:	469b      	mov	fp, r3
 8003ed0:	4643      	mov	r3, r8
 8003ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eda:	464b      	mov	r3, r9
 8003edc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	18db      	adds	r3, r3, r3
 8003efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003efe:	4613      	mov	r3, r2
 8003f00:	eb42 0303 	adc.w	r3, r2, r3
 8003f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f0e:	f7fc fe09 	bl	8000b24 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	4b3b      	ldr	r3, [pc, #236]	@ (8004008 <UART_SetConfig+0x2d4>)
 8003f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2264      	movs	r2, #100	@ 0x64
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	1acb      	subs	r3, r1, r3
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f2e:	4b36      	ldr	r3, [pc, #216]	@ (8004008 <UART_SetConfig+0x2d4>)
 8003f30:	fba3 2302 	umull	r2, r3, r3, r2
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f3c:	441c      	add	r4, r3
 8003f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f50:	4642      	mov	r2, r8
 8003f52:	464b      	mov	r3, r9
 8003f54:	1891      	adds	r1, r2, r2
 8003f56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f58:	415b      	adcs	r3, r3
 8003f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f60:	4641      	mov	r1, r8
 8003f62:	1851      	adds	r1, r2, r1
 8003f64:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f66:	4649      	mov	r1, r9
 8003f68:	414b      	adcs	r3, r1
 8003f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f78:	4659      	mov	r1, fp
 8003f7a:	00cb      	lsls	r3, r1, #3
 8003f7c:	4651      	mov	r1, sl
 8003f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f82:	4651      	mov	r1, sl
 8003f84:	00ca      	lsls	r2, r1, #3
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f94:	464b      	mov	r3, r9
 8003f96:	460a      	mov	r2, r1
 8003f98:	eb42 0303 	adc.w	r3, r2, r3
 8003f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	18db      	adds	r3, r3, r3
 8003fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fba:	4613      	mov	r3, r2
 8003fbc:	eb42 0303 	adc.w	r3, r2, r3
 8003fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fca:	f7fc fdab 	bl	8000b24 <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <UART_SetConfig+0x2d4>)
 8003fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	2164      	movs	r1, #100	@ 0x64
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	3332      	adds	r3, #50	@ 0x32
 8003fe6:	4a08      	ldr	r2, [pc, #32]	@ (8004008 <UART_SetConfig+0x2d4>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	f003 0207 	and.w	r2, r3, #7
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4422      	add	r2, r4
 8003ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ffc:	e106      	b.n	800420c <UART_SetConfig+0x4d8>
 8003ffe:	bf00      	nop
 8004000:	40011000 	.word	0x40011000
 8004004:	40011400 	.word	0x40011400
 8004008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800400c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004010:	2200      	movs	r2, #0
 8004012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004016:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800401a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800401e:	4642      	mov	r2, r8
 8004020:	464b      	mov	r3, r9
 8004022:	1891      	adds	r1, r2, r2
 8004024:	6239      	str	r1, [r7, #32]
 8004026:	415b      	adcs	r3, r3
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
 800402a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800402e:	4641      	mov	r1, r8
 8004030:	1854      	adds	r4, r2, r1
 8004032:	4649      	mov	r1, r9
 8004034:	eb43 0501 	adc.w	r5, r3, r1
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	00eb      	lsls	r3, r5, #3
 8004042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004046:	00e2      	lsls	r2, r4, #3
 8004048:	4614      	mov	r4, r2
 800404a:	461d      	mov	r5, r3
 800404c:	4643      	mov	r3, r8
 800404e:	18e3      	adds	r3, r4, r3
 8004050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004054:	464b      	mov	r3, r9
 8004056:	eb45 0303 	adc.w	r3, r5, r3
 800405a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800406a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800407a:	4629      	mov	r1, r5
 800407c:	008b      	lsls	r3, r1, #2
 800407e:	4621      	mov	r1, r4
 8004080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004084:	4621      	mov	r1, r4
 8004086:	008a      	lsls	r2, r1, #2
 8004088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800408c:	f7fc fd4a 	bl	8000b24 <__aeabi_uldivmod>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4b60      	ldr	r3, [pc, #384]	@ (8004218 <UART_SetConfig+0x4e4>)
 8004096:	fba3 2302 	umull	r2, r3, r3, r2
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	011c      	lsls	r4, r3, #4
 800409e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040b0:	4642      	mov	r2, r8
 80040b2:	464b      	mov	r3, r9
 80040b4:	1891      	adds	r1, r2, r2
 80040b6:	61b9      	str	r1, [r7, #24]
 80040b8:	415b      	adcs	r3, r3
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c0:	4641      	mov	r1, r8
 80040c2:	1851      	adds	r1, r2, r1
 80040c4:	6139      	str	r1, [r7, #16]
 80040c6:	4649      	mov	r1, r9
 80040c8:	414b      	adcs	r3, r1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040d8:	4659      	mov	r1, fp
 80040da:	00cb      	lsls	r3, r1, #3
 80040dc:	4651      	mov	r1, sl
 80040de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040e2:	4651      	mov	r1, sl
 80040e4:	00ca      	lsls	r2, r1, #3
 80040e6:	4610      	mov	r0, r2
 80040e8:	4619      	mov	r1, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	4642      	mov	r2, r8
 80040ee:	189b      	adds	r3, r3, r2
 80040f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040f4:	464b      	mov	r3, r9
 80040f6:	460a      	mov	r2, r1
 80040f8:	eb42 0303 	adc.w	r3, r2, r3
 80040fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	67bb      	str	r3, [r7, #120]	@ 0x78
 800410a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004118:	4649      	mov	r1, r9
 800411a:	008b      	lsls	r3, r1, #2
 800411c:	4641      	mov	r1, r8
 800411e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004122:	4641      	mov	r1, r8
 8004124:	008a      	lsls	r2, r1, #2
 8004126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800412a:	f7fc fcfb 	bl	8000b24 <__aeabi_uldivmod>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4611      	mov	r1, r2
 8004134:	4b38      	ldr	r3, [pc, #224]	@ (8004218 <UART_SetConfig+0x4e4>)
 8004136:	fba3 2301 	umull	r2, r3, r3, r1
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2264      	movs	r2, #100	@ 0x64
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	1acb      	subs	r3, r1, r3
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	3332      	adds	r3, #50	@ 0x32
 8004148:	4a33      	ldr	r2, [pc, #204]	@ (8004218 <UART_SetConfig+0x4e4>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004154:	441c      	add	r4, r3
 8004156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800415a:	2200      	movs	r2, #0
 800415c:	673b      	str	r3, [r7, #112]	@ 0x70
 800415e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004160:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004164:	4642      	mov	r2, r8
 8004166:	464b      	mov	r3, r9
 8004168:	1891      	adds	r1, r2, r2
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	415b      	adcs	r3, r3
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004174:	4641      	mov	r1, r8
 8004176:	1851      	adds	r1, r2, r1
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	4649      	mov	r1, r9
 800417c:	414b      	adcs	r3, r1
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800418c:	4659      	mov	r1, fp
 800418e:	00cb      	lsls	r3, r1, #3
 8004190:	4651      	mov	r1, sl
 8004192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004196:	4651      	mov	r1, sl
 8004198:	00ca      	lsls	r2, r1, #3
 800419a:	4610      	mov	r0, r2
 800419c:	4619      	mov	r1, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	4642      	mov	r2, r8
 80041a2:	189b      	adds	r3, r3, r2
 80041a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041a6:	464b      	mov	r3, r9
 80041a8:	460a      	mov	r2, r1
 80041aa:	eb42 0303 	adc.w	r3, r2, r3
 80041ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041c8:	4649      	mov	r1, r9
 80041ca:	008b      	lsls	r3, r1, #2
 80041cc:	4641      	mov	r1, r8
 80041ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d2:	4641      	mov	r1, r8
 80041d4:	008a      	lsls	r2, r1, #2
 80041d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041da:	f7fc fca3 	bl	8000b24 <__aeabi_uldivmod>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <UART_SetConfig+0x4e4>)
 80041e4:	fba3 1302 	umull	r1, r3, r3, r2
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	2164      	movs	r1, #100	@ 0x64
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	3332      	adds	r3, #50	@ 0x32
 80041f6:	4a08      	ldr	r2, [pc, #32]	@ (8004218 <UART_SetConfig+0x4e4>)
 80041f8:	fba2 2303 	umull	r2, r3, r2, r3
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	f003 020f 	and.w	r2, r3, #15
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4422      	add	r2, r4
 800420a:	609a      	str	r2, [r3, #8]
}
 800420c:	bf00      	nop
 800420e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004212:	46bd      	mov	sp, r7
 8004214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004218:	51eb851f 	.word	0x51eb851f

0800421c <memset>:
 800421c:	4402      	add	r2, r0
 800421e:	4603      	mov	r3, r0
 8004220:	4293      	cmp	r3, r2
 8004222:	d100      	bne.n	8004226 <memset+0xa>
 8004224:	4770      	bx	lr
 8004226:	f803 1b01 	strb.w	r1, [r3], #1
 800422a:	e7f9      	b.n	8004220 <memset+0x4>

0800422c <__libc_init_array>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4d0d      	ldr	r5, [pc, #52]	@ (8004264 <__libc_init_array+0x38>)
 8004230:	4c0d      	ldr	r4, [pc, #52]	@ (8004268 <__libc_init_array+0x3c>)
 8004232:	1b64      	subs	r4, r4, r5
 8004234:	10a4      	asrs	r4, r4, #2
 8004236:	2600      	movs	r6, #0
 8004238:	42a6      	cmp	r6, r4
 800423a:	d109      	bne.n	8004250 <__libc_init_array+0x24>
 800423c:	4d0b      	ldr	r5, [pc, #44]	@ (800426c <__libc_init_array+0x40>)
 800423e:	4c0c      	ldr	r4, [pc, #48]	@ (8004270 <__libc_init_array+0x44>)
 8004240:	f000 fa82 	bl	8004748 <_init>
 8004244:	1b64      	subs	r4, r4, r5
 8004246:	10a4      	asrs	r4, r4, #2
 8004248:	2600      	movs	r6, #0
 800424a:	42a6      	cmp	r6, r4
 800424c:	d105      	bne.n	800425a <__libc_init_array+0x2e>
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	f855 3b04 	ldr.w	r3, [r5], #4
 8004254:	4798      	blx	r3
 8004256:	3601      	adds	r6, #1
 8004258:	e7ee      	b.n	8004238 <__libc_init_array+0xc>
 800425a:	f855 3b04 	ldr.w	r3, [r5], #4
 800425e:	4798      	blx	r3
 8004260:	3601      	adds	r6, #1
 8004262:	e7f2      	b.n	800424a <__libc_init_array+0x1e>
 8004264:	080047f0 	.word	0x080047f0
 8004268:	080047f0 	.word	0x080047f0
 800426c:	080047f0 	.word	0x080047f0
 8004270:	080047f4 	.word	0x080047f4

08004274 <atan2>:
 8004274:	f000 b800 	b.w	8004278 <__ieee754_atan2>

08004278 <__ieee754_atan2>:
 8004278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800427c:	ec57 6b11 	vmov	r6, r7, d1
 8004280:	4273      	negs	r3, r6
 8004282:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8004400 <__ieee754_atan2+0x188>
 8004286:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800428a:	4333      	orrs	r3, r6
 800428c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004290:	4543      	cmp	r3, r8
 8004292:	ec51 0b10 	vmov	r0, r1, d0
 8004296:	4635      	mov	r5, r6
 8004298:	d809      	bhi.n	80042ae <__ieee754_atan2+0x36>
 800429a:	4244      	negs	r4, r0
 800429c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80042a0:	4304      	orrs	r4, r0
 80042a2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80042a6:	4544      	cmp	r4, r8
 80042a8:	468e      	mov	lr, r1
 80042aa:	4681      	mov	r9, r0
 80042ac:	d907      	bls.n	80042be <__ieee754_atan2+0x46>
 80042ae:	4632      	mov	r2, r6
 80042b0:	463b      	mov	r3, r7
 80042b2:	f7fb ff97 	bl	80001e4 <__adddf3>
 80042b6:	ec41 0b10 	vmov	d0, r0, r1
 80042ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042be:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80042c2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80042c6:	4334      	orrs	r4, r6
 80042c8:	d103      	bne.n	80042d2 <__ieee754_atan2+0x5a>
 80042ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042ce:	f000 b89b 	b.w	8004408 <atan>
 80042d2:	17bc      	asrs	r4, r7, #30
 80042d4:	f004 0402 	and.w	r4, r4, #2
 80042d8:	ea53 0909 	orrs.w	r9, r3, r9
 80042dc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80042e0:	d107      	bne.n	80042f2 <__ieee754_atan2+0x7a>
 80042e2:	2c02      	cmp	r4, #2
 80042e4:	d05f      	beq.n	80043a6 <__ieee754_atan2+0x12e>
 80042e6:	2c03      	cmp	r4, #3
 80042e8:	d1e5      	bne.n	80042b6 <__ieee754_atan2+0x3e>
 80042ea:	a141      	add	r1, pc, #260	@ (adr r1, 80043f0 <__ieee754_atan2+0x178>)
 80042ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042f0:	e7e1      	b.n	80042b6 <__ieee754_atan2+0x3e>
 80042f2:	4315      	orrs	r5, r2
 80042f4:	d106      	bne.n	8004304 <__ieee754_atan2+0x8c>
 80042f6:	f1be 0f00 	cmp.w	lr, #0
 80042fa:	da5f      	bge.n	80043bc <__ieee754_atan2+0x144>
 80042fc:	a13e      	add	r1, pc, #248	@ (adr r1, 80043f8 <__ieee754_atan2+0x180>)
 80042fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004302:	e7d8      	b.n	80042b6 <__ieee754_atan2+0x3e>
 8004304:	4542      	cmp	r2, r8
 8004306:	d10f      	bne.n	8004328 <__ieee754_atan2+0xb0>
 8004308:	4293      	cmp	r3, r2
 800430a:	f104 34ff 	add.w	r4, r4, #4294967295
 800430e:	d107      	bne.n	8004320 <__ieee754_atan2+0xa8>
 8004310:	2c02      	cmp	r4, #2
 8004312:	d84c      	bhi.n	80043ae <__ieee754_atan2+0x136>
 8004314:	4b34      	ldr	r3, [pc, #208]	@ (80043e8 <__ieee754_atan2+0x170>)
 8004316:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800431a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800431e:	e7ca      	b.n	80042b6 <__ieee754_atan2+0x3e>
 8004320:	2c02      	cmp	r4, #2
 8004322:	d848      	bhi.n	80043b6 <__ieee754_atan2+0x13e>
 8004324:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <__ieee754_atan2+0x174>)
 8004326:	e7f6      	b.n	8004316 <__ieee754_atan2+0x9e>
 8004328:	4543      	cmp	r3, r8
 800432a:	d0e4      	beq.n	80042f6 <__ieee754_atan2+0x7e>
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8004332:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004336:	da1e      	bge.n	8004376 <__ieee754_atan2+0xfe>
 8004338:	2f00      	cmp	r7, #0
 800433a:	da01      	bge.n	8004340 <__ieee754_atan2+0xc8>
 800433c:	323c      	adds	r2, #60	@ 0x3c
 800433e:	db1e      	blt.n	800437e <__ieee754_atan2+0x106>
 8004340:	4632      	mov	r2, r6
 8004342:	463b      	mov	r3, r7
 8004344:	f7fc fa2e 	bl	80007a4 <__aeabi_ddiv>
 8004348:	ec41 0b10 	vmov	d0, r0, r1
 800434c:	f000 f9f4 	bl	8004738 <fabs>
 8004350:	f000 f85a 	bl	8004408 <atan>
 8004354:	ec51 0b10 	vmov	r0, r1, d0
 8004358:	2c01      	cmp	r4, #1
 800435a:	d013      	beq.n	8004384 <__ieee754_atan2+0x10c>
 800435c:	2c02      	cmp	r4, #2
 800435e:	d015      	beq.n	800438c <__ieee754_atan2+0x114>
 8004360:	2c00      	cmp	r4, #0
 8004362:	d0a8      	beq.n	80042b6 <__ieee754_atan2+0x3e>
 8004364:	a318      	add	r3, pc, #96	@ (adr r3, 80043c8 <__ieee754_atan2+0x150>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f7fb ff39 	bl	80001e0 <__aeabi_dsub>
 800436e:	a318      	add	r3, pc, #96	@ (adr r3, 80043d0 <__ieee754_atan2+0x158>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	e014      	b.n	80043a0 <__ieee754_atan2+0x128>
 8004376:	a118      	add	r1, pc, #96	@ (adr r1, 80043d8 <__ieee754_atan2+0x160>)
 8004378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800437c:	e7ec      	b.n	8004358 <__ieee754_atan2+0xe0>
 800437e:	2000      	movs	r0, #0
 8004380:	2100      	movs	r1, #0
 8004382:	e7e9      	b.n	8004358 <__ieee754_atan2+0xe0>
 8004384:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004388:	4619      	mov	r1, r3
 800438a:	e794      	b.n	80042b6 <__ieee754_atan2+0x3e>
 800438c:	a30e      	add	r3, pc, #56	@ (adr r3, 80043c8 <__ieee754_atan2+0x150>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f7fb ff25 	bl	80001e0 <__aeabi_dsub>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	a10d      	add	r1, pc, #52	@ (adr r1, 80043d0 <__ieee754_atan2+0x158>)
 800439c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043a0:	f7fb ff1e 	bl	80001e0 <__aeabi_dsub>
 80043a4:	e787      	b.n	80042b6 <__ieee754_atan2+0x3e>
 80043a6:	a10a      	add	r1, pc, #40	@ (adr r1, 80043d0 <__ieee754_atan2+0x158>)
 80043a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043ac:	e783      	b.n	80042b6 <__ieee754_atan2+0x3e>
 80043ae:	a10c      	add	r1, pc, #48	@ (adr r1, 80043e0 <__ieee754_atan2+0x168>)
 80043b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043b4:	e77f      	b.n	80042b6 <__ieee754_atan2+0x3e>
 80043b6:	2000      	movs	r0, #0
 80043b8:	2100      	movs	r1, #0
 80043ba:	e77c      	b.n	80042b6 <__ieee754_atan2+0x3e>
 80043bc:	a106      	add	r1, pc, #24	@ (adr r1, 80043d8 <__ieee754_atan2+0x160>)
 80043be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043c2:	e778      	b.n	80042b6 <__ieee754_atan2+0x3e>
 80043c4:	f3af 8000 	nop.w
 80043c8:	33145c07 	.word	0x33145c07
 80043cc:	3ca1a626 	.word	0x3ca1a626
 80043d0:	54442d18 	.word	0x54442d18
 80043d4:	400921fb 	.word	0x400921fb
 80043d8:	54442d18 	.word	0x54442d18
 80043dc:	3ff921fb 	.word	0x3ff921fb
 80043e0:	54442d18 	.word	0x54442d18
 80043e4:	3fe921fb 	.word	0x3fe921fb
 80043e8:	08004790 	.word	0x08004790
 80043ec:	08004778 	.word	0x08004778
 80043f0:	54442d18 	.word	0x54442d18
 80043f4:	c00921fb 	.word	0xc00921fb
 80043f8:	54442d18 	.word	0x54442d18
 80043fc:	bff921fb 	.word	0xbff921fb
 8004400:	7ff00000 	.word	0x7ff00000
 8004404:	00000000 	.word	0x00000000

08004408 <atan>:
 8004408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440c:	ec55 4b10 	vmov	r4, r5, d0
 8004410:	4bbf      	ldr	r3, [pc, #764]	@ (8004710 <atan+0x308>)
 8004412:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8004416:	429e      	cmp	r6, r3
 8004418:	46ab      	mov	fp, r5
 800441a:	d918      	bls.n	800444e <atan+0x46>
 800441c:	4bbd      	ldr	r3, [pc, #756]	@ (8004714 <atan+0x30c>)
 800441e:	429e      	cmp	r6, r3
 8004420:	d801      	bhi.n	8004426 <atan+0x1e>
 8004422:	d109      	bne.n	8004438 <atan+0x30>
 8004424:	b144      	cbz	r4, 8004438 <atan+0x30>
 8004426:	4622      	mov	r2, r4
 8004428:	462b      	mov	r3, r5
 800442a:	4620      	mov	r0, r4
 800442c:	4629      	mov	r1, r5
 800442e:	f7fb fed9 	bl	80001e4 <__adddf3>
 8004432:	4604      	mov	r4, r0
 8004434:	460d      	mov	r5, r1
 8004436:	e006      	b.n	8004446 <atan+0x3e>
 8004438:	f1bb 0f00 	cmp.w	fp, #0
 800443c:	f340 812b 	ble.w	8004696 <atan+0x28e>
 8004440:	a597      	add	r5, pc, #604	@ (adr r5, 80046a0 <atan+0x298>)
 8004442:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004446:	ec45 4b10 	vmov	d0, r4, r5
 800444a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800444e:	4bb2      	ldr	r3, [pc, #712]	@ (8004718 <atan+0x310>)
 8004450:	429e      	cmp	r6, r3
 8004452:	d813      	bhi.n	800447c <atan+0x74>
 8004454:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8004458:	429e      	cmp	r6, r3
 800445a:	d80c      	bhi.n	8004476 <atan+0x6e>
 800445c:	a392      	add	r3, pc, #584	@ (adr r3, 80046a8 <atan+0x2a0>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	4620      	mov	r0, r4
 8004464:	4629      	mov	r1, r5
 8004466:	f7fb febd 	bl	80001e4 <__adddf3>
 800446a:	4bac      	ldr	r3, [pc, #688]	@ (800471c <atan+0x314>)
 800446c:	2200      	movs	r2, #0
 800446e:	f7fc faff 	bl	8000a70 <__aeabi_dcmpgt>
 8004472:	2800      	cmp	r0, #0
 8004474:	d1e7      	bne.n	8004446 <atan+0x3e>
 8004476:	f04f 3aff 	mov.w	sl, #4294967295
 800447a:	e029      	b.n	80044d0 <atan+0xc8>
 800447c:	f000 f95c 	bl	8004738 <fabs>
 8004480:	4ba7      	ldr	r3, [pc, #668]	@ (8004720 <atan+0x318>)
 8004482:	429e      	cmp	r6, r3
 8004484:	ec55 4b10 	vmov	r4, r5, d0
 8004488:	f200 80bc 	bhi.w	8004604 <atan+0x1fc>
 800448c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8004490:	429e      	cmp	r6, r3
 8004492:	f200 809e 	bhi.w	80045d2 <atan+0x1ca>
 8004496:	4622      	mov	r2, r4
 8004498:	462b      	mov	r3, r5
 800449a:	4620      	mov	r0, r4
 800449c:	4629      	mov	r1, r5
 800449e:	f7fb fea1 	bl	80001e4 <__adddf3>
 80044a2:	4b9e      	ldr	r3, [pc, #632]	@ (800471c <atan+0x314>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	f7fb fe9b 	bl	80001e0 <__aeabi_dsub>
 80044aa:	2200      	movs	r2, #0
 80044ac:	4606      	mov	r6, r0
 80044ae:	460f      	mov	r7, r1
 80044b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044b4:	4620      	mov	r0, r4
 80044b6:	4629      	mov	r1, r5
 80044b8:	f7fb fe94 	bl	80001e4 <__adddf3>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4630      	mov	r0, r6
 80044c2:	4639      	mov	r1, r7
 80044c4:	f7fc f96e 	bl	80007a4 <__aeabi_ddiv>
 80044c8:	f04f 0a00 	mov.w	sl, #0
 80044cc:	4604      	mov	r4, r0
 80044ce:	460d      	mov	r5, r1
 80044d0:	4622      	mov	r2, r4
 80044d2:	462b      	mov	r3, r5
 80044d4:	4620      	mov	r0, r4
 80044d6:	4629      	mov	r1, r5
 80044d8:	f7fc f83a 	bl	8000550 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4680      	mov	r8, r0
 80044e2:	4689      	mov	r9, r1
 80044e4:	f7fc f834 	bl	8000550 <__aeabi_dmul>
 80044e8:	a371      	add	r3, pc, #452	@ (adr r3, 80046b0 <atan+0x2a8>)
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	4606      	mov	r6, r0
 80044f0:	460f      	mov	r7, r1
 80044f2:	f7fc f82d 	bl	8000550 <__aeabi_dmul>
 80044f6:	a370      	add	r3, pc, #448	@ (adr r3, 80046b8 <atan+0x2b0>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fb fe72 	bl	80001e4 <__adddf3>
 8004500:	4632      	mov	r2, r6
 8004502:	463b      	mov	r3, r7
 8004504:	f7fc f824 	bl	8000550 <__aeabi_dmul>
 8004508:	a36d      	add	r3, pc, #436	@ (adr r3, 80046c0 <atan+0x2b8>)
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	f7fb fe69 	bl	80001e4 <__adddf3>
 8004512:	4632      	mov	r2, r6
 8004514:	463b      	mov	r3, r7
 8004516:	f7fc f81b 	bl	8000550 <__aeabi_dmul>
 800451a:	a36b      	add	r3, pc, #428	@ (adr r3, 80046c8 <atan+0x2c0>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f7fb fe60 	bl	80001e4 <__adddf3>
 8004524:	4632      	mov	r2, r6
 8004526:	463b      	mov	r3, r7
 8004528:	f7fc f812 	bl	8000550 <__aeabi_dmul>
 800452c:	a368      	add	r3, pc, #416	@ (adr r3, 80046d0 <atan+0x2c8>)
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	f7fb fe57 	bl	80001e4 <__adddf3>
 8004536:	4632      	mov	r2, r6
 8004538:	463b      	mov	r3, r7
 800453a:	f7fc f809 	bl	8000550 <__aeabi_dmul>
 800453e:	a366      	add	r3, pc, #408	@ (adr r3, 80046d8 <atan+0x2d0>)
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f7fb fe4e 	bl	80001e4 <__adddf3>
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	f7fc f800 	bl	8000550 <__aeabi_dmul>
 8004550:	a363      	add	r3, pc, #396	@ (adr r3, 80046e0 <atan+0x2d8>)
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	4680      	mov	r8, r0
 8004558:	4689      	mov	r9, r1
 800455a:	4630      	mov	r0, r6
 800455c:	4639      	mov	r1, r7
 800455e:	f7fb fff7 	bl	8000550 <__aeabi_dmul>
 8004562:	a361      	add	r3, pc, #388	@ (adr r3, 80046e8 <atan+0x2e0>)
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	f7fb fe3a 	bl	80001e0 <__aeabi_dsub>
 800456c:	4632      	mov	r2, r6
 800456e:	463b      	mov	r3, r7
 8004570:	f7fb ffee 	bl	8000550 <__aeabi_dmul>
 8004574:	a35e      	add	r3, pc, #376	@ (adr r3, 80046f0 <atan+0x2e8>)
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f7fb fe31 	bl	80001e0 <__aeabi_dsub>
 800457e:	4632      	mov	r2, r6
 8004580:	463b      	mov	r3, r7
 8004582:	f7fb ffe5 	bl	8000550 <__aeabi_dmul>
 8004586:	a35c      	add	r3, pc, #368	@ (adr r3, 80046f8 <atan+0x2f0>)
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f7fb fe28 	bl	80001e0 <__aeabi_dsub>
 8004590:	4632      	mov	r2, r6
 8004592:	463b      	mov	r3, r7
 8004594:	f7fb ffdc 	bl	8000550 <__aeabi_dmul>
 8004598:	a359      	add	r3, pc, #356	@ (adr r3, 8004700 <atan+0x2f8>)
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	f7fb fe1f 	bl	80001e0 <__aeabi_dsub>
 80045a2:	4632      	mov	r2, r6
 80045a4:	463b      	mov	r3, r7
 80045a6:	f7fb ffd3 	bl	8000550 <__aeabi_dmul>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4640      	mov	r0, r8
 80045b0:	4649      	mov	r1, r9
 80045b2:	f7fb fe17 	bl	80001e4 <__adddf3>
 80045b6:	4622      	mov	r2, r4
 80045b8:	462b      	mov	r3, r5
 80045ba:	f7fb ffc9 	bl	8000550 <__aeabi_dmul>
 80045be:	f1ba 3fff 	cmp.w	sl, #4294967295
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	d148      	bne.n	800465a <atan+0x252>
 80045c8:	4620      	mov	r0, r4
 80045ca:	4629      	mov	r1, r5
 80045cc:	f7fb fe08 	bl	80001e0 <__aeabi_dsub>
 80045d0:	e72f      	b.n	8004432 <atan+0x2a>
 80045d2:	4b52      	ldr	r3, [pc, #328]	@ (800471c <atan+0x314>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fb fe01 	bl	80001e0 <__aeabi_dsub>
 80045de:	4b4f      	ldr	r3, [pc, #316]	@ (800471c <atan+0x314>)
 80045e0:	4606      	mov	r6, r0
 80045e2:	460f      	mov	r7, r1
 80045e4:	2200      	movs	r2, #0
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fb fdfb 	bl	80001e4 <__adddf3>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4630      	mov	r0, r6
 80045f4:	4639      	mov	r1, r7
 80045f6:	f7fc f8d5 	bl	80007a4 <__aeabi_ddiv>
 80045fa:	f04f 0a01 	mov.w	sl, #1
 80045fe:	4604      	mov	r4, r0
 8004600:	460d      	mov	r5, r1
 8004602:	e765      	b.n	80044d0 <atan+0xc8>
 8004604:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <atan+0x31c>)
 8004606:	429e      	cmp	r6, r3
 8004608:	d21c      	bcs.n	8004644 <atan+0x23c>
 800460a:	4b47      	ldr	r3, [pc, #284]	@ (8004728 <atan+0x320>)
 800460c:	2200      	movs	r2, #0
 800460e:	4620      	mov	r0, r4
 8004610:	4629      	mov	r1, r5
 8004612:	f7fb fde5 	bl	80001e0 <__aeabi_dsub>
 8004616:	4b44      	ldr	r3, [pc, #272]	@ (8004728 <atan+0x320>)
 8004618:	4606      	mov	r6, r0
 800461a:	460f      	mov	r7, r1
 800461c:	2200      	movs	r2, #0
 800461e:	4620      	mov	r0, r4
 8004620:	4629      	mov	r1, r5
 8004622:	f7fb ff95 	bl	8000550 <__aeabi_dmul>
 8004626:	4b3d      	ldr	r3, [pc, #244]	@ (800471c <atan+0x314>)
 8004628:	2200      	movs	r2, #0
 800462a:	f7fb fddb 	bl	80001e4 <__adddf3>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4630      	mov	r0, r6
 8004634:	4639      	mov	r1, r7
 8004636:	f7fc f8b5 	bl	80007a4 <__aeabi_ddiv>
 800463a:	f04f 0a02 	mov.w	sl, #2
 800463e:	4604      	mov	r4, r0
 8004640:	460d      	mov	r5, r1
 8004642:	e745      	b.n	80044d0 <atan+0xc8>
 8004644:	4622      	mov	r2, r4
 8004646:	462b      	mov	r3, r5
 8004648:	4938      	ldr	r1, [pc, #224]	@ (800472c <atan+0x324>)
 800464a:	2000      	movs	r0, #0
 800464c:	f7fc f8aa 	bl	80007a4 <__aeabi_ddiv>
 8004650:	f04f 0a03 	mov.w	sl, #3
 8004654:	4604      	mov	r4, r0
 8004656:	460d      	mov	r5, r1
 8004658:	e73a      	b.n	80044d0 <atan+0xc8>
 800465a:	4b35      	ldr	r3, [pc, #212]	@ (8004730 <atan+0x328>)
 800465c:	4e35      	ldr	r6, [pc, #212]	@ (8004734 <atan+0x32c>)
 800465e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f7fb fdbb 	bl	80001e0 <__aeabi_dsub>
 800466a:	4622      	mov	r2, r4
 800466c:	462b      	mov	r3, r5
 800466e:	f7fb fdb7 	bl	80001e0 <__aeabi_dsub>
 8004672:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800467e:	f7fb fdaf 	bl	80001e0 <__aeabi_dsub>
 8004682:	f1bb 0f00 	cmp.w	fp, #0
 8004686:	4604      	mov	r4, r0
 8004688:	460d      	mov	r5, r1
 800468a:	f6bf aedc 	bge.w	8004446 <atan+0x3e>
 800468e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004692:	461d      	mov	r5, r3
 8004694:	e6d7      	b.n	8004446 <atan+0x3e>
 8004696:	a51c      	add	r5, pc, #112	@ (adr r5, 8004708 <atan+0x300>)
 8004698:	e9d5 4500 	ldrd	r4, r5, [r5]
 800469c:	e6d3      	b.n	8004446 <atan+0x3e>
 800469e:	bf00      	nop
 80046a0:	54442d18 	.word	0x54442d18
 80046a4:	3ff921fb 	.word	0x3ff921fb
 80046a8:	8800759c 	.word	0x8800759c
 80046ac:	7e37e43c 	.word	0x7e37e43c
 80046b0:	e322da11 	.word	0xe322da11
 80046b4:	3f90ad3a 	.word	0x3f90ad3a
 80046b8:	24760deb 	.word	0x24760deb
 80046bc:	3fa97b4b 	.word	0x3fa97b4b
 80046c0:	a0d03d51 	.word	0xa0d03d51
 80046c4:	3fb10d66 	.word	0x3fb10d66
 80046c8:	c54c206e 	.word	0xc54c206e
 80046cc:	3fb745cd 	.word	0x3fb745cd
 80046d0:	920083ff 	.word	0x920083ff
 80046d4:	3fc24924 	.word	0x3fc24924
 80046d8:	5555550d 	.word	0x5555550d
 80046dc:	3fd55555 	.word	0x3fd55555
 80046e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80046e4:	bfa2b444 	.word	0xbfa2b444
 80046e8:	52defd9a 	.word	0x52defd9a
 80046ec:	3fadde2d 	.word	0x3fadde2d
 80046f0:	af749a6d 	.word	0xaf749a6d
 80046f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80046f8:	fe231671 	.word	0xfe231671
 80046fc:	3fbc71c6 	.word	0x3fbc71c6
 8004700:	9998ebc4 	.word	0x9998ebc4
 8004704:	3fc99999 	.word	0x3fc99999
 8004708:	54442d18 	.word	0x54442d18
 800470c:	bff921fb 	.word	0xbff921fb
 8004710:	440fffff 	.word	0x440fffff
 8004714:	7ff00000 	.word	0x7ff00000
 8004718:	3fdbffff 	.word	0x3fdbffff
 800471c:	3ff00000 	.word	0x3ff00000
 8004720:	3ff2ffff 	.word	0x3ff2ffff
 8004724:	40038000 	.word	0x40038000
 8004728:	3ff80000 	.word	0x3ff80000
 800472c:	bff00000 	.word	0xbff00000
 8004730:	080047a8 	.word	0x080047a8
 8004734:	080047c8 	.word	0x080047c8

08004738 <fabs>:
 8004738:	ec51 0b10 	vmov	r0, r1, d0
 800473c:	4602      	mov	r2, r0
 800473e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004742:	ec43 2b10 	vmov	d0, r2, r3
 8004746:	4770      	bx	lr

08004748 <_init>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	bf00      	nop
 800474c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474e:	bc08      	pop	{r3}
 8004750:	469e      	mov	lr, r3
 8004752:	4770      	bx	lr

08004754 <_fini>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	bf00      	nop
 8004758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475a:	bc08      	pop	{r3}
 800475c:	469e      	mov	lr, r3
 800475e:	4770      	bx	lr
