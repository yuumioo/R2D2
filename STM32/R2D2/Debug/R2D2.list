
R2D2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004348  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080044dc  080044dc  000054dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004540  08004540  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004540  08004540  00005540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004548  08004548  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00005548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004550  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  0800455c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800455c  00006114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5e7  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e31  00000000  00000000  00013623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00015458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ef  00000000  00000000  00016108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158ee  00000000  00000000  00016af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3a0  00000000  00000000  0002c3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e94  00000000  00000000  0003a785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003654  00000000  00000000  000c465c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000c7cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080044c4 	.word	0x080044c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080044c4 	.word	0x080044c4

080001d4 <__aeabi_dmul>:
 80001d4:	b570      	push	{r4, r5, r6, lr}
 80001d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e2:	bf1d      	ittte	ne
 80001e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e8:	ea94 0f0c 	teqne	r4, ip
 80001ec:	ea95 0f0c 	teqne	r5, ip
 80001f0:	f000 f8de 	bleq	80003b0 <__aeabi_dmul+0x1dc>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea81 0603 	eor.w	r6, r1, r3
 80001fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000202:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000206:	bf18      	it	ne
 8000208:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800020c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000210:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000214:	d038      	beq.n	8000288 <__aeabi_dmul+0xb4>
 8000216:	fba0 ce02 	umull	ip, lr, r0, r2
 800021a:	f04f 0500 	mov.w	r5, #0
 800021e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000222:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000226:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022a:	f04f 0600 	mov.w	r6, #0
 800022e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000232:	f09c 0f00 	teq	ip, #0
 8000236:	bf18      	it	ne
 8000238:	f04e 0e01 	orrne.w	lr, lr, #1
 800023c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000240:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000244:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000248:	d204      	bcs.n	8000254 <__aeabi_dmul+0x80>
 800024a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024e:	416d      	adcs	r5, r5
 8000250:	eb46 0606 	adc.w	r6, r6, r6
 8000254:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000258:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800025c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000260:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000264:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000268:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800026c:	bf88      	it	hi
 800026e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000272:	d81e      	bhi.n	80002b2 <__aeabi_dmul+0xde>
 8000274:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800028c:	ea46 0101 	orr.w	r1, r6, r1
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	ea81 0103 	eor.w	r1, r1, r3
 8000298:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800029c:	bfc2      	ittt	gt
 800029e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a6:	bd70      	popgt	{r4, r5, r6, pc}
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f04f 0e00 	mov.w	lr, #0
 80002b0:	3c01      	subs	r4, #1
 80002b2:	f300 80ab 	bgt.w	800040c <__aeabi_dmul+0x238>
 80002b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ba:	bfde      	ittt	le
 80002bc:	2000      	movle	r0, #0
 80002be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c2:	bd70      	pople	{r4, r5, r6, pc}
 80002c4:	f1c4 0400 	rsb	r4, r4, #0
 80002c8:	3c20      	subs	r4, #32
 80002ca:	da35      	bge.n	8000338 <__aeabi_dmul+0x164>
 80002cc:	340c      	adds	r4, #12
 80002ce:	dc1b      	bgt.n	8000308 <__aeabi_dmul+0x134>
 80002d0:	f104 0414 	add.w	r4, r4, #20
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f305 	lsl.w	r3, r0, r5
 80002dc:	fa20 f004 	lsr.w	r0, r0, r4
 80002e0:	fa01 f205 	lsl.w	r2, r1, r5
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f4:	fa21 f604 	lsr.w	r6, r1, r4
 80002f8:	eb42 0106 	adc.w	r1, r2, r6
 80002fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000300:	bf08      	it	eq
 8000302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f1c4 040c 	rsb	r4, r4, #12
 800030c:	f1c4 0520 	rsb	r5, r4, #32
 8000310:	fa00 f304 	lsl.w	r3, r0, r4
 8000314:	fa20 f005 	lsr.w	r0, r0, r5
 8000318:	fa01 f204 	lsl.w	r2, r1, r4
 800031c:	ea40 0002 	orr.w	r0, r0, r2
 8000320:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f205 	lsl.w	r2, r0, r5
 8000340:	ea4e 0e02 	orr.w	lr, lr, r2
 8000344:	fa20 f304 	lsr.w	r3, r0, r4
 8000348:	fa01 f205 	lsl.w	r2, r1, r5
 800034c:	ea43 0302 	orr.w	r3, r3, r2
 8000350:	fa21 f004 	lsr.w	r0, r1, r4
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	fa21 f204 	lsr.w	r2, r1, r4
 800035c:	ea20 0002 	bic.w	r0, r0, r2
 8000360:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000368:	bf08      	it	eq
 800036a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f094 0f00 	teq	r4, #0
 8000374:	d10f      	bne.n	8000396 <__aeabi_dmul+0x1c2>
 8000376:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037a:	0040      	lsls	r0, r0, #1
 800037c:	eb41 0101 	adc.w	r1, r1, r1
 8000380:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000384:	bf08      	it	eq
 8000386:	3c01      	subeq	r4, #1
 8000388:	d0f7      	beq.n	800037a <__aeabi_dmul+0x1a6>
 800038a:	ea41 0106 	orr.w	r1, r1, r6
 800038e:	f095 0f00 	teq	r5, #0
 8000392:	bf18      	it	ne
 8000394:	4770      	bxne	lr
 8000396:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	eb43 0303 	adc.w	r3, r3, r3
 80003a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a4:	bf08      	it	eq
 80003a6:	3d01      	subeq	r5, #1
 80003a8:	d0f7      	beq.n	800039a <__aeabi_dmul+0x1c6>
 80003aa:	ea43 0306 	orr.w	r3, r3, r6
 80003ae:	4770      	bx	lr
 80003b0:	ea94 0f0c 	teq	r4, ip
 80003b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b8:	bf18      	it	ne
 80003ba:	ea95 0f0c 	teqne	r5, ip
 80003be:	d00c      	beq.n	80003da <__aeabi_dmul+0x206>
 80003c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c4:	bf18      	it	ne
 80003c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ca:	d1d1      	bne.n	8000370 <__aeabi_dmul+0x19c>
 80003cc:	ea81 0103 	eor.w	r1, r1, r3
 80003d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003de:	bf06      	itte	eq
 80003e0:	4610      	moveq	r0, r2
 80003e2:	4619      	moveq	r1, r3
 80003e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e8:	d019      	beq.n	800041e <__aeabi_dmul+0x24a>
 80003ea:	ea94 0f0c 	teq	r4, ip
 80003ee:	d102      	bne.n	80003f6 <__aeabi_dmul+0x222>
 80003f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f4:	d113      	bne.n	800041e <__aeabi_dmul+0x24a>
 80003f6:	ea95 0f0c 	teq	r5, ip
 80003fa:	d105      	bne.n	8000408 <__aeabi_dmul+0x234>
 80003fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000400:	bf1c      	itt	ne
 8000402:	4610      	movne	r0, r2
 8000404:	4619      	movne	r1, r3
 8000406:	d10a      	bne.n	800041e <__aeabi_dmul+0x24a>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000414:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000422:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000426:	bd70      	pop	{r4, r5, r6, pc}

08000428 <__aeabi_drsub>:
 8000428:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800042c:	e002      	b.n	8000434 <__adddf3>
 800042e:	bf00      	nop

08000430 <__aeabi_dsub>:
 8000430:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000434 <__adddf3>:
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	bf1f      	itttt	ne
 800044a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000452:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000456:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045a:	f000 80e2 	beq.w	8000622 <__adddf3+0x1ee>
 800045e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000462:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000466:	bfb8      	it	lt
 8000468:	426d      	neglt	r5, r5
 800046a:	dd0c      	ble.n	8000486 <__adddf3+0x52>
 800046c:	442c      	add	r4, r5
 800046e:	ea80 0202 	eor.w	r2, r0, r2
 8000472:	ea81 0303 	eor.w	r3, r1, r3
 8000476:	ea82 0000 	eor.w	r0, r2, r0
 800047a:	ea83 0101 	eor.w	r1, r3, r1
 800047e:	ea80 0202 	eor.w	r2, r0, r2
 8000482:	ea81 0303 	eor.w	r3, r1, r3
 8000486:	2d36      	cmp	r5, #54	@ 0x36
 8000488:	bf88      	it	hi
 800048a:	bd30      	pophi	{r4, r5, pc}
 800048c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000490:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000494:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000498:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800049c:	d002      	beq.n	80004a4 <__adddf3+0x70>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x84>
 80004b2:	4252      	negs	r2, r2
 80004b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b8:	ea94 0f05 	teq	r4, r5
 80004bc:	f000 80a7 	beq.w	800060e <__adddf3+0x1da>
 80004c0:	f1a4 0401 	sub.w	r4, r4, #1
 80004c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c8:	db0d      	blt.n	80004e6 <__adddf3+0xb2>
 80004ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ce:	fa22 f205 	lsr.w	r2, r2, r5
 80004d2:	1880      	adds	r0, r0, r2
 80004d4:	f141 0100 	adc.w	r1, r1, #0
 80004d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004dc:	1880      	adds	r0, r0, r2
 80004de:	fa43 f305 	asr.w	r3, r3, r5
 80004e2:	4159      	adcs	r1, r3
 80004e4:	e00e      	b.n	8000504 <__adddf3+0xd0>
 80004e6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ea:	f10e 0e20 	add.w	lr, lr, #32
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f4:	bf28      	it	cs
 80004f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	18c0      	adds	r0, r0, r3
 8000500:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	d507      	bpl.n	800051a <__adddf3+0xe6>
 800050a:	f04f 0e00 	mov.w	lr, #0
 800050e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000512:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000516:	eb6e 0101 	sbc.w	r1, lr, r1
 800051a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800051e:	d31b      	bcc.n	8000558 <__adddf3+0x124>
 8000520:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000524:	d30c      	bcc.n	8000540 <__adddf3+0x10c>
 8000526:	0849      	lsrs	r1, r1, #1
 8000528:	ea5f 0030 	movs.w	r0, r0, rrx
 800052c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000530:	f104 0401 	add.w	r4, r4, #1
 8000534:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000538:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800053c:	f080 809a 	bcs.w	8000674 <__adddf3+0x240>
 8000540:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000544:	bf08      	it	eq
 8000546:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054a:	f150 0000 	adcs.w	r0, r0, #0
 800054e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000552:	ea41 0105 	orr.w	r1, r1, r5
 8000556:	bd30      	pop	{r4, r5, pc}
 8000558:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800055c:	4140      	adcs	r0, r0
 800055e:	eb41 0101 	adc.w	r1, r1, r1
 8000562:	3c01      	subs	r4, #1
 8000564:	bf28      	it	cs
 8000566:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056a:	d2e9      	bcs.n	8000540 <__adddf3+0x10c>
 800056c:	f091 0f00 	teq	r1, #0
 8000570:	bf04      	itt	eq
 8000572:	4601      	moveq	r1, r0
 8000574:	2000      	moveq	r0, #0
 8000576:	fab1 f381 	clz	r3, r1
 800057a:	bf08      	it	eq
 800057c:	3320      	addeq	r3, #32
 800057e:	f1a3 030b 	sub.w	r3, r3, #11
 8000582:	f1b3 0220 	subs.w	r2, r3, #32
 8000586:	da0c      	bge.n	80005a2 <__adddf3+0x16e>
 8000588:	320c      	adds	r2, #12
 800058a:	dd08      	ble.n	800059e <__adddf3+0x16a>
 800058c:	f102 0c14 	add.w	ip, r2, #20
 8000590:	f1c2 020c 	rsb	r2, r2, #12
 8000594:	fa01 f00c 	lsl.w	r0, r1, ip
 8000598:	fa21 f102 	lsr.w	r1, r1, r2
 800059c:	e00c      	b.n	80005b8 <__adddf3+0x184>
 800059e:	f102 0214 	add.w	r2, r2, #20
 80005a2:	bfd8      	it	le
 80005a4:	f1c2 0c20 	rsble	ip, r2, #32
 80005a8:	fa01 f102 	lsl.w	r1, r1, r2
 80005ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b0:	bfdc      	itt	le
 80005b2:	ea41 010c 	orrle.w	r1, r1, ip
 80005b6:	4090      	lslle	r0, r2
 80005b8:	1ae4      	subs	r4, r4, r3
 80005ba:	bfa2      	ittt	ge
 80005bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c0:	4329      	orrge	r1, r5
 80005c2:	bd30      	popge	{r4, r5, pc}
 80005c4:	ea6f 0404 	mvn.w	r4, r4
 80005c8:	3c1f      	subs	r4, #31
 80005ca:	da1c      	bge.n	8000606 <__adddf3+0x1d2>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc0e      	bgt.n	80005ee <__adddf3+0x1ba>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0220 	rsb	r2, r4, #32
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f302 	lsl.w	r3, r1, r2
 80005e0:	ea40 0003 	orr.w	r0, r0, r3
 80005e4:	fa21 f304 	lsr.w	r3, r1, r4
 80005e8:	ea45 0103 	orr.w	r1, r5, r3
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	f1c4 040c 	rsb	r4, r4, #12
 80005f2:	f1c4 0220 	rsb	r2, r4, #32
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 f304 	lsl.w	r3, r1, r4
 80005fe:	ea40 0003 	orr.w	r0, r0, r3
 8000602:	4629      	mov	r1, r5
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	fa21 f004 	lsr.w	r0, r1, r4
 800060a:	4629      	mov	r1, r5
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	f094 0f00 	teq	r4, #0
 8000612:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000616:	bf06      	itte	eq
 8000618:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800061c:	3401      	addeq	r4, #1
 800061e:	3d01      	subne	r5, #1
 8000620:	e74e      	b.n	80004c0 <__adddf3+0x8c>
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf18      	it	ne
 8000628:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800062c:	d029      	beq.n	8000682 <__adddf3+0x24e>
 800062e:	ea94 0f05 	teq	r4, r5
 8000632:	bf08      	it	eq
 8000634:	ea90 0f02 	teqeq	r0, r2
 8000638:	d005      	beq.n	8000646 <__adddf3+0x212>
 800063a:	ea54 0c00 	orrs.w	ip, r4, r0
 800063e:	bf04      	itt	eq
 8000640:	4619      	moveq	r1, r3
 8000642:	4610      	moveq	r0, r2
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	ea91 0f03 	teq	r1, r3
 800064a:	bf1e      	ittt	ne
 800064c:	2100      	movne	r1, #0
 800064e:	2000      	movne	r0, #0
 8000650:	bd30      	popne	{r4, r5, pc}
 8000652:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000656:	d105      	bne.n	8000664 <__adddf3+0x230>
 8000658:	0040      	lsls	r0, r0, #1
 800065a:	4149      	adcs	r1, r1
 800065c:	bf28      	it	cs
 800065e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000668:	bf3c      	itt	cc
 800066a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800066e:	bd30      	popcc	{r4, r5, pc}
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000674:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000678:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800067c:	f04f 0000 	mov.w	r0, #0
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000686:	bf1a      	itte	ne
 8000688:	4619      	movne	r1, r3
 800068a:	4610      	movne	r0, r2
 800068c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000690:	bf1c      	itt	ne
 8000692:	460b      	movne	r3, r1
 8000694:	4602      	movne	r2, r0
 8000696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069a:	bf06      	itte	eq
 800069c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a0:	ea91 0f03 	teqeq	r1, r3
 80006a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop

080006ac <__aeabi_ui2d>:
 80006ac:	f090 0f00 	teq	r0, #0
 80006b0:	bf04      	itt	eq
 80006b2:	2100      	moveq	r1, #0
 80006b4:	4770      	bxeq	lr
 80006b6:	b530      	push	{r4, r5, lr}
 80006b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c0:	f04f 0500 	mov.w	r5, #0
 80006c4:	f04f 0100 	mov.w	r1, #0
 80006c8:	e750      	b.n	800056c <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_i2d>:
 80006cc:	f090 0f00 	teq	r0, #0
 80006d0:	bf04      	itt	eq
 80006d2:	2100      	moveq	r1, #0
 80006d4:	4770      	bxeq	lr
 80006d6:	b530      	push	{r4, r5, lr}
 80006d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e4:	bf48      	it	mi
 80006e6:	4240      	negmi	r0, r0
 80006e8:	f04f 0100 	mov.w	r1, #0
 80006ec:	e73e      	b.n	800056c <__adddf3+0x138>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2d>:
 80006f0:	0042      	lsls	r2, r0, #1
 80006f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fe:	bf1f      	itttt	ne
 8000700:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000704:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000708:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800070c:	4770      	bxne	lr
 800070e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000712:	bf08      	it	eq
 8000714:	4770      	bxeq	lr
 8000716:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071a:	bf04      	itt	eq
 800071c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000728:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000730:	e71c      	b.n	800056c <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_ul2d>:
 8000734:	ea50 0201 	orrs.w	r2, r0, r1
 8000738:	bf08      	it	eq
 800073a:	4770      	bxeq	lr
 800073c:	b530      	push	{r4, r5, lr}
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	e00a      	b.n	800075a <__aeabi_l2d+0x16>

08000744 <__aeabi_l2d>:
 8000744:	ea50 0201 	orrs.w	r2, r0, r1
 8000748:	bf08      	it	eq
 800074a:	4770      	bxeq	lr
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000752:	d502      	bpl.n	800075a <__aeabi_l2d+0x16>
 8000754:	4240      	negs	r0, r0
 8000756:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800075e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000762:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000766:	f43f aed8 	beq.w	800051a <__adddf3+0xe6>
 800076a:	f04f 0203 	mov.w	r2, #3
 800076e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000772:	bf18      	it	ne
 8000774:	3203      	addne	r2, #3
 8000776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077a:	bf18      	it	ne
 800077c:	3203      	addne	r2, #3
 800077e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000782:	f1c2 0320 	rsb	r3, r2, #32
 8000786:	fa00 fc03 	lsl.w	ip, r0, r3
 800078a:	fa20 f002 	lsr.w	r0, r0, r2
 800078e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000792:	ea40 000e 	orr.w	r0, r0, lr
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	4414      	add	r4, r2
 800079c:	e6bd      	b.n	800051a <__adddf3+0xe6>
 800079e:	bf00      	nop

080007a0 <__aeabi_d2uiz>:
 80007a0:	004a      	lsls	r2, r1, #1
 80007a2:	d211      	bcs.n	80007c8 <__aeabi_d2uiz+0x28>
 80007a4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007a8:	d211      	bcs.n	80007ce <__aeabi_d2uiz+0x2e>
 80007aa:	d50d      	bpl.n	80007c8 <__aeabi_d2uiz+0x28>
 80007ac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b4:	d40e      	bmi.n	80007d4 <__aeabi_d2uiz+0x34>
 80007b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d2:	d102      	bne.n	80007da <__aeabi_d2uiz+0x3a>
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	4770      	bx	lr
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	4770      	bx	lr

080007e0 <__aeabi_uldivmod>:
 80007e0:	b953      	cbnz	r3, 80007f8 <__aeabi_uldivmod+0x18>
 80007e2:	b94a      	cbnz	r2, 80007f8 <__aeabi_uldivmod+0x18>
 80007e4:	2900      	cmp	r1, #0
 80007e6:	bf08      	it	eq
 80007e8:	2800      	cmpeq	r0, #0
 80007ea:	bf1c      	itt	ne
 80007ec:	f04f 31ff 	movne.w	r1, #4294967295
 80007f0:	f04f 30ff 	movne.w	r0, #4294967295
 80007f4:	f000 b96a 	b.w	8000acc <__aeabi_idiv0>
 80007f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000800:	f000 f806 	bl	8000810 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4770      	bx	lr

08000810 <__udivmoddi4>:
 8000810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000814:	9d08      	ldr	r5, [sp, #32]
 8000816:	460c      	mov	r4, r1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d14e      	bne.n	80008ba <__udivmoddi4+0xaa>
 800081c:	4694      	mov	ip, r2
 800081e:	458c      	cmp	ip, r1
 8000820:	4686      	mov	lr, r0
 8000822:	fab2 f282 	clz	r2, r2
 8000826:	d962      	bls.n	80008ee <__udivmoddi4+0xde>
 8000828:	b14a      	cbz	r2, 800083e <__udivmoddi4+0x2e>
 800082a:	f1c2 0320 	rsb	r3, r2, #32
 800082e:	4091      	lsls	r1, r2
 8000830:	fa20 f303 	lsr.w	r3, r0, r3
 8000834:	fa0c fc02 	lsl.w	ip, ip, r2
 8000838:	4319      	orrs	r1, r3
 800083a:	fa00 fe02 	lsl.w	lr, r0, r2
 800083e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000842:	fa1f f68c 	uxth.w	r6, ip
 8000846:	fbb1 f4f7 	udiv	r4, r1, r7
 800084a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800084e:	fb07 1114 	mls	r1, r7, r4, r1
 8000852:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000856:	fb04 f106 	mul.w	r1, r4, r6
 800085a:	4299      	cmp	r1, r3
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x64>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f104 30ff 	add.w	r0, r4, #4294967295
 8000866:	f080 8112 	bcs.w	8000a8e <__udivmoddi4+0x27e>
 800086a:	4299      	cmp	r1, r3
 800086c:	f240 810f 	bls.w	8000a8e <__udivmoddi4+0x27e>
 8000870:	3c02      	subs	r4, #2
 8000872:	4463      	add	r3, ip
 8000874:	1a59      	subs	r1, r3, r1
 8000876:	fa1f f38e 	uxth.w	r3, lr
 800087a:	fbb1 f0f7 	udiv	r0, r1, r7
 800087e:	fb07 1110 	mls	r1, r7, r0, r1
 8000882:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000886:	fb00 f606 	mul.w	r6, r0, r6
 800088a:	429e      	cmp	r6, r3
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x94>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f100 31ff 	add.w	r1, r0, #4294967295
 8000896:	f080 80fc 	bcs.w	8000a92 <__udivmoddi4+0x282>
 800089a:	429e      	cmp	r6, r3
 800089c:	f240 80f9 	bls.w	8000a92 <__udivmoddi4+0x282>
 80008a0:	4463      	add	r3, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	1b9b      	subs	r3, r3, r6
 80008a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11d      	cbz	r5, 80008b6 <__udivmoddi4+0xa6>
 80008ae:	40d3      	lsrs	r3, r2
 80008b0:	2200      	movs	r2, #0
 80008b2:	e9c5 3200 	strd	r3, r2, [r5]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d905      	bls.n	80008ca <__udivmoddi4+0xba>
 80008be:	b10d      	cbz	r5, 80008c4 <__udivmoddi4+0xb4>
 80008c0:	e9c5 0100 	strd	r0, r1, [r5]
 80008c4:	2100      	movs	r1, #0
 80008c6:	4608      	mov	r0, r1
 80008c8:	e7f5      	b.n	80008b6 <__udivmoddi4+0xa6>
 80008ca:	fab3 f183 	clz	r1, r3
 80008ce:	2900      	cmp	r1, #0
 80008d0:	d146      	bne.n	8000960 <__udivmoddi4+0x150>
 80008d2:	42a3      	cmp	r3, r4
 80008d4:	d302      	bcc.n	80008dc <__udivmoddi4+0xcc>
 80008d6:	4290      	cmp	r0, r2
 80008d8:	f0c0 80f0 	bcc.w	8000abc <__udivmoddi4+0x2ac>
 80008dc:	1a86      	subs	r6, r0, r2
 80008de:	eb64 0303 	sbc.w	r3, r4, r3
 80008e2:	2001      	movs	r0, #1
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d0e6      	beq.n	80008b6 <__udivmoddi4+0xa6>
 80008e8:	e9c5 6300 	strd	r6, r3, [r5]
 80008ec:	e7e3      	b.n	80008b6 <__udivmoddi4+0xa6>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	f040 8090 	bne.w	8000a14 <__udivmoddi4+0x204>
 80008f4:	eba1 040c 	sub.w	r4, r1, ip
 80008f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008fc:	fa1f f78c 	uxth.w	r7, ip
 8000900:	2101      	movs	r1, #1
 8000902:	fbb4 f6f8 	udiv	r6, r4, r8
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb08 4416 	mls	r4, r8, r6, r4
 800090e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000912:	fb07 f006 	mul.w	r0, r7, r6
 8000916:	4298      	cmp	r0, r3
 8000918:	d908      	bls.n	800092c <__udivmoddi4+0x11c>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x11a>
 8000924:	4298      	cmp	r0, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2b4>
 800092a:	4626      	mov	r6, r4
 800092c:	1a1c      	subs	r4, r3, r0
 800092e:	fa1f f38e 	uxth.w	r3, lr
 8000932:	fbb4 f0f8 	udiv	r0, r4, r8
 8000936:	fb08 4410 	mls	r4, r8, r0, r4
 800093a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800093e:	fb00 f707 	mul.w	r7, r0, r7
 8000942:	429f      	cmp	r7, r3
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x148>
 8000946:	eb1c 0303 	adds.w	r3, ip, r3
 800094a:	f100 34ff 	add.w	r4, r0, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x146>
 8000950:	429f      	cmp	r7, r3
 8000952:	f200 80b0 	bhi.w	8000ab6 <__udivmoddi4+0x2a6>
 8000956:	4620      	mov	r0, r4
 8000958:	1bdb      	subs	r3, r3, r7
 800095a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095e:	e7a5      	b.n	80008ac <__udivmoddi4+0x9c>
 8000960:	f1c1 0620 	rsb	r6, r1, #32
 8000964:	408b      	lsls	r3, r1
 8000966:	fa22 f706 	lsr.w	r7, r2, r6
 800096a:	431f      	orrs	r7, r3
 800096c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000970:	fa04 f301 	lsl.w	r3, r4, r1
 8000974:	ea43 030c 	orr.w	r3, r3, ip
 8000978:	40f4      	lsrs	r4, r6
 800097a:	fa00 f801 	lsl.w	r8, r0, r1
 800097e:	0c38      	lsrs	r0, r7, #16
 8000980:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000984:	fbb4 fef0 	udiv	lr, r4, r0
 8000988:	fa1f fc87 	uxth.w	ip, r7
 800098c:	fb00 441e 	mls	r4, r0, lr, r4
 8000990:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000994:	fb0e f90c 	mul.w	r9, lr, ip
 8000998:	45a1      	cmp	r9, r4
 800099a:	fa02 f201 	lsl.w	r2, r2, r1
 800099e:	d90a      	bls.n	80009b6 <__udivmoddi4+0x1a6>
 80009a0:	193c      	adds	r4, r7, r4
 80009a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009a6:	f080 8084 	bcs.w	8000ab2 <__udivmoddi4+0x2a2>
 80009aa:	45a1      	cmp	r9, r4
 80009ac:	f240 8081 	bls.w	8000ab2 <__udivmoddi4+0x2a2>
 80009b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80009b4:	443c      	add	r4, r7
 80009b6:	eba4 0409 	sub.w	r4, r4, r9
 80009ba:	fa1f f983 	uxth.w	r9, r3
 80009be:	fbb4 f3f0 	udiv	r3, r4, r0
 80009c2:	fb00 4413 	mls	r4, r0, r3, r4
 80009c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ce:	45a4      	cmp	ip, r4
 80009d0:	d907      	bls.n	80009e2 <__udivmoddi4+0x1d2>
 80009d2:	193c      	adds	r4, r7, r4
 80009d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80009d8:	d267      	bcs.n	8000aaa <__udivmoddi4+0x29a>
 80009da:	45a4      	cmp	ip, r4
 80009dc:	d965      	bls.n	8000aaa <__udivmoddi4+0x29a>
 80009de:	3b02      	subs	r3, #2
 80009e0:	443c      	add	r4, r7
 80009e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009e6:	fba0 9302 	umull	r9, r3, r0, r2
 80009ea:	eba4 040c 	sub.w	r4, r4, ip
 80009ee:	429c      	cmp	r4, r3
 80009f0:	46ce      	mov	lr, r9
 80009f2:	469c      	mov	ip, r3
 80009f4:	d351      	bcc.n	8000a9a <__udivmoddi4+0x28a>
 80009f6:	d04e      	beq.n	8000a96 <__udivmoddi4+0x286>
 80009f8:	b155      	cbz	r5, 8000a10 <__udivmoddi4+0x200>
 80009fa:	ebb8 030e 	subs.w	r3, r8, lr
 80009fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000a02:	fa04 f606 	lsl.w	r6, r4, r6
 8000a06:	40cb      	lsrs	r3, r1
 8000a08:	431e      	orrs	r6, r3
 8000a0a:	40cc      	lsrs	r4, r1
 8000a0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000a10:	2100      	movs	r1, #0
 8000a12:	e750      	b.n	80008b6 <__udivmoddi4+0xa6>
 8000a14:	f1c2 0320 	rsb	r3, r2, #32
 8000a18:	fa20 f103 	lsr.w	r1, r0, r3
 8000a1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a20:	fa24 f303 	lsr.w	r3, r4, r3
 8000a24:	4094      	lsls	r4, r2
 8000a26:	430c      	orrs	r4, r1
 8000a28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a30:	fa1f f78c 	uxth.w	r7, ip
 8000a34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a38:	fb08 3110 	mls	r1, r8, r0, r3
 8000a3c:	0c23      	lsrs	r3, r4, #16
 8000a3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a42:	fb00 f107 	mul.w	r1, r0, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d908      	bls.n	8000a5c <__udivmoddi4+0x24c>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a52:	d22c      	bcs.n	8000aae <__udivmoddi4+0x29e>
 8000a54:	4299      	cmp	r1, r3
 8000a56:	d92a      	bls.n	8000aae <__udivmoddi4+0x29e>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	4463      	add	r3, ip
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a64:	fb08 3311 	mls	r3, r8, r1, r3
 8000a68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a6c:	fb01 f307 	mul.w	r3, r1, r7
 8000a70:	42a3      	cmp	r3, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x276>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a7c:	d213      	bcs.n	8000aa6 <__udivmoddi4+0x296>
 8000a7e:	42a3      	cmp	r3, r4
 8000a80:	d911      	bls.n	8000aa6 <__udivmoddi4+0x296>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	1ae4      	subs	r4, r4, r3
 8000a88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a8c:	e739      	b.n	8000902 <__udivmoddi4+0xf2>
 8000a8e:	4604      	mov	r4, r0
 8000a90:	e6f0      	b.n	8000874 <__udivmoddi4+0x64>
 8000a92:	4608      	mov	r0, r1
 8000a94:	e706      	b.n	80008a4 <__udivmoddi4+0x94>
 8000a96:	45c8      	cmp	r8, r9
 8000a98:	d2ae      	bcs.n	80009f8 <__udivmoddi4+0x1e8>
 8000a9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000aa2:	3801      	subs	r0, #1
 8000aa4:	e7a8      	b.n	80009f8 <__udivmoddi4+0x1e8>
 8000aa6:	4631      	mov	r1, r6
 8000aa8:	e7ed      	b.n	8000a86 <__udivmoddi4+0x276>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	e799      	b.n	80009e2 <__udivmoddi4+0x1d2>
 8000aae:	4630      	mov	r0, r6
 8000ab0:	e7d4      	b.n	8000a5c <__udivmoddi4+0x24c>
 8000ab2:	46d6      	mov	lr, sl
 8000ab4:	e77f      	b.n	80009b6 <__udivmoddi4+0x1a6>
 8000ab6:	4463      	add	r3, ip
 8000ab8:	3802      	subs	r0, #2
 8000aba:	e74d      	b.n	8000958 <__udivmoddi4+0x148>
 8000abc:	4606      	mov	r6, r0
 8000abe:	4623      	mov	r3, r4
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e70f      	b.n	80008e4 <__udivmoddi4+0xd4>
 8000ac4:	3e02      	subs	r6, #2
 8000ac6:	4463      	add	r3, ip
 8000ac8:	e730      	b.n	800092c <__udivmoddi4+0x11c>
 8000aca:	bf00      	nop

08000acc <__aeabi_idiv0>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <Start_PWM>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */



void Start_PWM(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

	IN_Reverse();
 8000ad6:	f000 fb59 	bl	800118c <IN_Reverse>
	uint32_t pwm_val = 0.75* (htim1.Init.Period + 1);
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <Start_PWM+0x40>)
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fde3 	bl	80006ac <__aeabi_ui2d>
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <Start_PWM+0x44>)
 8000aec:	f7ff fb72 	bl	80001d4 <__aeabi_dmul>
 8000af0:	4602      	mov	r2, r0
 8000af2:	460b      	mov	r3, r1
 8000af4:	4610      	mov	r0, r2
 8000af6:	4619      	mov	r1, r3
 8000af8:	f7ff fe52 	bl	80007a0 <__aeabi_d2uiz>
 8000afc:	4603      	mov	r3, r0
 8000afe:	607b      	str	r3, [r7, #4]
	Set_PWM_EN(pwm_val);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 fb91 	bl	8001228 <Set_PWM_EN>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000028 	.word	0x20000028
 8000b14:	3fe80000 	.word	0x3fe80000

08000b18 <Stop_PWM>:

void Stop_PWM(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

	uint32_t pwm_val = 0* (htim1.Init.Period + 1);
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
	Set_PWM_EN(pwm_val);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 fb80 	bl	8001228 <Set_PWM_EN>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <Turn_Right>:

void Turn_Right(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

	IN_Right();
 8000b36:	f000 fb5d 	bl	80011f4 <IN_Right>
	uint32_t pwm_val = 0.75* (htim1.Init.Period + 1);
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <Turn_Right+0x40>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fdb3 	bl	80006ac <__aeabi_ui2d>
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <Turn_Right+0x44>)
 8000b4c:	f7ff fb42 	bl	80001d4 <__aeabi_dmul>
 8000b50:	4602      	mov	r2, r0
 8000b52:	460b      	mov	r3, r1
 8000b54:	4610      	mov	r0, r2
 8000b56:	4619      	mov	r1, r3
 8000b58:	f7ff fe22 	bl	80007a0 <__aeabi_d2uiz>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	607b      	str	r3, [r7, #4]
	Set_PWM_EN(pwm_val);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 fb61 	bl	8001228 <Set_PWM_EN>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000028 	.word	0x20000028
 8000b74:	3fe80000 	.word	0x3fe80000

08000b78 <Turn_Left>:

void Turn_Left(void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

	IN_Left();
 8000b7e:	f000 fb1f 	bl	80011c0 <IN_Left>
	uint32_t pwm_val = 0.75* (htim1.Init.Period + 1);
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <Turn_Left+0x40>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd8f 	bl	80006ac <__aeabi_ui2d>
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <Turn_Left+0x44>)
 8000b94:	f7ff fb1e 	bl	80001d4 <__aeabi_dmul>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	4610      	mov	r0, r2
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f7ff fdfe 	bl	80007a0 <__aeabi_d2uiz>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	607b      	str	r3, [r7, #4]
	Set_PWM_EN(pwm_val);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 fb3d 	bl	8001228 <Set_PWM_EN>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000028 	.word	0x20000028
 8000bbc:	3fe80000 	.word	0x3fe80000

08000bc0 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	uint8_t response[] = "it worked!\r\n";
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <HAL_GPIO_EXTI_Callback+0x58>)
 8000bcc:	f107 0408 	add.w	r4, r7, #8
 8000bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd2:	c407      	stmia	r4!, {r0, r1, r2}
 8000bd4:	7023      	strb	r3, [r4, #0]
	 HAL_UART_Transmit(&huart1, response, sizeof(response) -1, 100);
 8000bd6:	f107 0108 	add.w	r1, r7, #8
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	220c      	movs	r2, #12
 8000bde:	480f      	ldr	r0, [pc, #60]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000be0:	f002 fc3e 	bl	8003460 <HAL_UART_Transmit>
	if(GPIO_Pin == B1_Pin)
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bea:	d111      	bne.n	8000c10 <HAL_GPIO_EXTI_Callback+0x50>
	{
		curr_tick = HAL_GetTick();
 8000bec:	f000 fd56 	bl	800169c <HAL_GetTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bf4:	6013      	str	r3, [r2, #0]
		if((curr_tick - last_tick) > Debounce_Delay)
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x64>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	2bc8      	cmp	r3, #200	@ 0xc8
 8000c02:	d905      	bls.n	8000c10 <HAL_GPIO_EXTI_Callback+0x50>
		{
			last_tick = curr_tick;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x60>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a06      	ldr	r2, [pc, #24]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x64>)
 8000c0a:	6013      	str	r3, [r2, #0]
			Start_PWM();
 8000c0c:	f7ff ff60 	bl	8000ad0 <Start_PWM>
		}
	}
}
 8000c10:	bf00      	nop
 8000c12:	371c      	adds	r7, #28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd90      	pop	{r4, r7, pc}
 8000c18:	080044dc 	.word	0x080044dc
 8000c1c:	20000070 	.word	0x20000070
 8000c20:	20000104 	.word	0x20000104
 8000c24:	20000100 	.word	0x20000100

08000c28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b092      	sub	sp, #72	@ 0x48
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c30:	2120      	movs	r1, #32
 8000c32:	4844      	ldr	r0, [pc, #272]	@ (8000d44 <HAL_UART_RxCpltCallback+0x11c>)
 8000c34:	f001 f87f 	bl	8001d36 <HAL_GPIO_TogglePin>
    char received_data = buffer[0];  // Assuming you've received 1 byte
 8000c38:	4b43      	ldr	r3, [pc, #268]	@ (8000d48 <HAL_UART_RxCpltCallback+0x120>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    switch(received_data)
 8000c40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000c44:	3b61      	subs	r3, #97	@ 0x61
 8000c46:	2b16      	cmp	r3, #22
 8000c48:	d872      	bhi.n	8000d30 <HAL_UART_RxCpltCallback+0x108>
 8000c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c50 <HAL_UART_RxCpltCallback+0x28>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000d11 	.word	0x08000d11
 8000c54:	08000d31 	.word	0x08000d31
 8000c58:	08000d31 	.word	0x08000d31
 8000c5c:	08000ced 	.word	0x08000ced
 8000c60:	08000d31 	.word	0x08000d31
 8000c64:	08000d31 	.word	0x08000d31
 8000c68:	08000d31 	.word	0x08000d31
 8000c6c:	08000d31 	.word	0x08000d31
 8000c70:	08000d31 	.word	0x08000d31
 8000c74:	08000d31 	.word	0x08000d31
 8000c78:	08000d31 	.word	0x08000d31
 8000c7c:	08000d31 	.word	0x08000d31
 8000c80:	08000d31 	.word	0x08000d31
 8000c84:	08000d31 	.word	0x08000d31
 8000c88:	08000d31 	.word	0x08000d31
 8000c8c:	08000d31 	.word	0x08000d31
 8000c90:	08000d31 	.word	0x08000d31
 8000c94:	08000d31 	.word	0x08000d31
 8000c98:	08000ccd 	.word	0x08000ccd
 8000c9c:	08000d31 	.word	0x08000d31
 8000ca0:	08000d31 	.word	0x08000d31
 8000ca4:	08000d31 	.word	0x08000d31
 8000ca8:	08000cad 	.word	0x08000cad
	{
    case 'w':
    	Start_PWM();
 8000cac:	f7ff ff10 	bl	8000ad0 <Start_PWM>
        uint8_t response[] = "vroom!\r\n";
 8000cb0:	4a26      	ldr	r2, [pc, #152]	@ (8000d4c <HAL_UART_RxCpltCallback+0x124>)
 8000cb2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000cb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cb8:	c303      	stmia	r3!, {r0, r1}
 8000cba:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, response, sizeof(response) - 1, 100);
 8000cbc:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000cc0:	2364      	movs	r3, #100	@ 0x64
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	4822      	ldr	r0, [pc, #136]	@ (8000d50 <HAL_UART_RxCpltCallback+0x128>)
 8000cc6:	f002 fbcb 	bl	8003460 <HAL_UART_Transmit>
        break;
 8000cca:	e031      	b.n	8000d30 <HAL_UART_RxCpltCallback+0x108>

    case 's':
    	Stop_PWM();
 8000ccc:	f7ff ff24 	bl	8000b18 <Stop_PWM>
        uint8_t response2[] = "Stopped\r\n";
 8000cd0:	4a20      	ldr	r2, [pc, #128]	@ (8000d54 <HAL_UART_RxCpltCallback+0x12c>)
 8000cd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cd8:	c303      	stmia	r3!, {r0, r1}
 8000cda:	801a      	strh	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, response2, sizeof(response) - 1, 100);
 8000cdc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000ce0:	2364      	movs	r3, #100	@ 0x64
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	481a      	ldr	r0, [pc, #104]	@ (8000d50 <HAL_UART_RxCpltCallback+0x128>)
 8000ce6:	f002 fbbb 	bl	8003460 <HAL_UART_Transmit>
        break;
 8000cea:	e021      	b.n	8000d30 <HAL_UART_RxCpltCallback+0x108>

    case 'd':
    	Turn_Right();
 8000cec:	f7ff ff20 	bl	8000b30 <Turn_Right>
        uint8_t response3[] = "Turning right!\r\n";
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_UART_RxCpltCallback+0x130>)
 8000cf2:	f107 041c 	add.w	r4, r7, #28
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfc:	682b      	ldr	r3, [r5, #0]
 8000cfe:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart1, response3, sizeof(response) - 1, 100);
 8000d00:	f107 011c 	add.w	r1, r7, #28
 8000d04:	2364      	movs	r3, #100	@ 0x64
 8000d06:	2208      	movs	r2, #8
 8000d08:	4811      	ldr	r0, [pc, #68]	@ (8000d50 <HAL_UART_RxCpltCallback+0x128>)
 8000d0a:	f002 fba9 	bl	8003460 <HAL_UART_Transmit>
        break;
 8000d0e:	e00f      	b.n	8000d30 <HAL_UART_RxCpltCallback+0x108>

    case 'a':
    	Turn_Left();
 8000d10:	f7ff ff32 	bl	8000b78 <Turn_Left>
        uint8_t response4[] = "Turning left!\r\n";
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_UART_RxCpltCallback+0x134>)
 8000d16:	f107 040c 	add.w	r4, r7, #12
 8000d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        HAL_UART_Transmit(&huart1, response4, sizeof(response) - 1, 100);
 8000d20:	f107 010c 	add.w	r1, r7, #12
 8000d24:	2364      	movs	r3, #100	@ 0x64
 8000d26:	2208      	movs	r2, #8
 8000d28:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <HAL_UART_RxCpltCallback+0x128>)
 8000d2a:	f002 fb99 	bl	8003460 <HAL_UART_Transmit>
        break;
 8000d2e:	bf00      	nop
	}



    // Re-enable UART reception to keep listening for the next byte
    HAL_UART_Receive_IT(&huart1, buffer, 1);  // Receive the next byte
 8000d30:	2201      	movs	r2, #1
 8000d32:	4905      	ldr	r1, [pc, #20]	@ (8000d48 <HAL_UART_RxCpltCallback+0x120>)
 8000d34:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <HAL_UART_RxCpltCallback+0x128>)
 8000d36:	f002 fc1e 	bl	8003576 <HAL_UART_Receive_IT>
}
 8000d3a:	bf00      	nop
 8000d3c:	3748      	adds	r7, #72	@ 0x48
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bdb0      	pop	{r4, r5, r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40020000 	.word	0x40020000
 8000d48:	20000108 	.word	0x20000108
 8000d4c:	080044ec 	.word	0x080044ec
 8000d50:	20000070 	.word	0x20000070
 8000d54:	080044f8 	.word	0x080044f8
 8000d58:	08004504 	.word	0x08004504
 8000d5c:	08004518 	.word	0x08004518

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f000 fc34 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f814 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f000 f97e 	bl	800106c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d70:	f000 f952 	bl	8001018 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d74:	f000 f87a 	bl	8000e6c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000d78:	f000 f924 	bl	8000fc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,buffer, 1);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4903      	ldr	r1, [pc, #12]	@ (8000d8c <main+0x2c>)
 8000d80:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <main+0x30>)
 8000d82:	f002 fbf8 	bl	8003576 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d86:	bf00      	nop
 8000d88:	e7fd      	b.n	8000d86 <main+0x26>
 8000d8a:	bf00      	nop
 8000d8c:	20000108 	.word	0x20000108
 8000d90:	20000070 	.word	0x20000070

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	@ 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	@ 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fb62 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <SystemClock_Config+0xd0>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	4a28      	ldr	r2, [pc, #160]	@ (8000e64 <SystemClock_Config+0xd0>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc8:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <SystemClock_Config+0xd0>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b23      	ldr	r3, [pc, #140]	@ (8000e68 <SystemClock_Config+0xd4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000de0:	4a21      	ldr	r2, [pc, #132]	@ (8000e68 <SystemClock_Config+0xd4>)
 8000de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <SystemClock_Config+0xd4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e0c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e12:	2304      	movs	r3, #4
 8000e14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e16:	2307      	movs	r3, #7
 8000e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 ffbc 	bl	8001d9c <HAL_RCC_OscConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e2a:	f000 f9a9 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2e:	230f      	movs	r3, #15
 8000e30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	2302      	movs	r3, #2
 8000e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fa1e 	bl	800228c <HAL_RCC_ClockConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e56:	f000 f993 	bl	8001180 <Error_Handler>
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3750      	adds	r7, #80	@ 0x50
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40007000 	.word	0x40007000

08000e6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b096      	sub	sp, #88	@ 0x58
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 fae1 	bl	800446c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eaa:	4b44      	ldr	r3, [pc, #272]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000eac:	4a44      	ldr	r2, [pc, #272]	@ (8000fc0 <MX_TIM1_Init+0x154>)
 8000eae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 41;
 8000eb0:	4b42      	ldr	r3, [pc, #264]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000eb2:	2229      	movs	r2, #41	@ 0x29
 8000eb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b41      	ldr	r3, [pc, #260]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000ebe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ec2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b3d      	ldr	r3, [pc, #244]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eca:	4b3c      	ldr	r3, [pc, #240]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ed6:	4839      	ldr	r0, [pc, #228]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000ed8:	f001 fbf8 	bl	80026cc <HAL_TIM_Base_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ee2:	f000 f94d 	bl	8001180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4832      	ldr	r0, [pc, #200]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000ef4:	f001 fe04 	bl	8002b00 <HAL_TIM_ConfigClockSource>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000efe:	f000 f93f 	bl	8001180 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f02:	482e      	ldr	r0, [pc, #184]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000f04:	f001 fc31 	bl	800276a <HAL_TIM_PWM_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f0e:	f000 f937 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4826      	ldr	r0, [pc, #152]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000f22:	f002 f98d 	bl	8003240 <HAL_TIMEx_MasterConfigSynchronization>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f2c:	f000 f928 	bl	8001180 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f30:	2360      	movs	r3, #96	@ 0x60
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	4819      	ldr	r0, [pc, #100]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000f56:	f001 fd11 	bl	800297c <HAL_TIM_PWM_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000f60:	f000 f90e 	bl	8001180 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4813      	ldr	r0, [pc, #76]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000f6e:	f001 fd05 	bl	800297c <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000f78:	f000 f902 	bl	8001180 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4807      	ldr	r0, [pc, #28]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000fa0:	f002 f9bc 	bl	800331c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000faa:	f000 f8e9 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fae:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <MX_TIM1_Init+0x150>)
 8000fb0:	f000 f9a0 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8000fb4:	bf00      	nop
 8000fb6:	3758      	adds	r7, #88	@ 0x58
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000028 	.word	0x20000028
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_USART1_UART_Init+0x4c>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <MX_USART1_UART_Init+0x50>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <MX_USART1_UART_Init+0x4c>)
 8000fd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_USART1_UART_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_USART1_UART_Init+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <MX_USART1_UART_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_USART1_UART_Init+0x4c>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <MX_USART1_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_USART1_UART_Init+0x4c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_USART1_UART_Init+0x4c>)
 8000ffc:	f002 f9e0 	bl	80033c0 <HAL_UART_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001006:	f000 f8bb 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000070 	.word	0x20000070
 8001014:	40011000 	.word	0x40011000

08001018 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <MX_USART2_UART_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001050:	f002 f9b6 	bl	80033c0 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800105a:	f000 f891 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000b8 	.word	0x200000b8
 8001068:	40004400 	.word	0x40004400

0800106c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b3b      	ldr	r3, [pc, #236]	@ (8001174 <MX_GPIO_Init+0x108>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a3a      	ldr	r2, [pc, #232]	@ (8001174 <MX_GPIO_Init+0x108>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <MX_GPIO_Init+0x108>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b34      	ldr	r3, [pc, #208]	@ (8001174 <MX_GPIO_Init+0x108>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a33      	ldr	r2, [pc, #204]	@ (8001174 <MX_GPIO_Init+0x108>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <MX_GPIO_Init+0x108>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <MX_GPIO_Init+0x108>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001174 <MX_GPIO_Init+0x108>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <MX_GPIO_Init+0x108>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <MX_GPIO_Init+0x108>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a25      	ldr	r2, [pc, #148]	@ (8001174 <MX_GPIO_Init+0x108>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b23      	ldr	r3, [pc, #140]	@ (8001174 <MX_GPIO_Init+0x108>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN4_Pin|IN3_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	210f      	movs	r1, #15
 80010f6:	4820      	ldr	r0, [pc, #128]	@ (8001178 <MX_GPIO_Init+0x10c>)
 80010f8:	f000 fe04 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2120      	movs	r1, #32
 8001100:	481e      	ldr	r0, [pc, #120]	@ (800117c <MX_GPIO_Init+0x110>)
 8001102:	f000 fdff 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4816      	ldr	r0, [pc, #88]	@ (8001178 <MX_GPIO_Init+0x10c>)
 800111e:	f000 fc6d 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN4_Pin IN3_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN1_Pin|IN2_Pin;
 8001122:	230f      	movs	r3, #15
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	480f      	ldr	r0, [pc, #60]	@ (8001178 <MX_GPIO_Init+0x10c>)
 800113a:	f000 fc5f 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800113e:	2320      	movs	r3, #32
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4809      	ldr	r0, [pc, #36]	@ (800117c <MX_GPIO_Init+0x110>)
 8001156:	f000 fc51 	bl	80019fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2028      	movs	r0, #40	@ 0x28
 8001160:	f000 fb83 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001164:	2028      	movs	r0, #40	@ 0x28
 8001166:	f000 fb9c 	bl	80018a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	@ 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40020800 	.word	0x40020800
 800117c:	40020000 	.word	0x40020000

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <Error_Handler+0x8>

0800118c <IN_Reverse>:
	HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_SET);
}

void IN_Reverse(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2104      	movs	r1, #4
 8001194:	4809      	ldr	r0, [pc, #36]	@ (80011bc <IN_Reverse+0x30>)
 8001196:	f000 fdb5 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	2108      	movs	r1, #8
 800119e:	4807      	ldr	r0, [pc, #28]	@ (80011bc <IN_Reverse+0x30>)
 80011a0:	f000 fdb0 	bl	8001d04 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2102      	movs	r1, #2
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <IN_Reverse+0x30>)
 80011aa:	f000 fdab 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2101      	movs	r1, #1
 80011b2:	4802      	ldr	r0, [pc, #8]	@ (80011bc <IN_Reverse+0x30>)
 80011b4:	f000 fda6 	bl	8001d04 <HAL_GPIO_WritePin>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40020800 	.word	0x40020800

080011c0 <IN_Left>:

void IN_Left(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2104      	movs	r1, #4
 80011c8:	4809      	ldr	r0, [pc, #36]	@ (80011f0 <IN_Left+0x30>)
 80011ca:	f000 fd9b 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2108      	movs	r1, #8
 80011d2:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <IN_Left+0x30>)
 80011d4:	f000 fd96 	bl	8001d04 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2102      	movs	r1, #2
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <IN_Left+0x30>)
 80011de:	f000 fd91 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2101      	movs	r1, #1
 80011e6:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <IN_Left+0x30>)
 80011e8:	f000 fd8c 	bl	8001d04 <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40020800 	.word	0x40020800

080011f4 <IN_Right>:


void IN_Right(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2104      	movs	r1, #4
 80011fc:	4809      	ldr	r0, [pc, #36]	@ (8001224 <IN_Right+0x30>)
 80011fe:	f000 fd81 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2108      	movs	r1, #8
 8001206:	4807      	ldr	r0, [pc, #28]	@ (8001224 <IN_Right+0x30>)
 8001208:	f000 fd7c 	bl	8001d04 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2102      	movs	r1, #2
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <IN_Right+0x30>)
 8001212:	f000 fd77 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	4802      	ldr	r0, [pc, #8]	@ (8001224 <IN_Right+0x30>)
 800121c:	f000 fd72 	bl	8001d04 <HAL_GPIO_WritePin>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40020800 	.word	0x40020800

08001228 <Set_PWM_EN>:


void Set_PWM_EN(uint16_t pwm_val)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001232:	2100      	movs	r1, #0
 8001234:	4809      	ldr	r0, [pc, #36]	@ (800125c <Set_PWM_EN+0x34>)
 8001236:	f001 faf1 	bl	800281c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800123a:	2104      	movs	r1, #4
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <Set_PWM_EN+0x34>)
 800123e:	f001 faed 	bl	800281c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val); // ENA
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <Set_PWM_EN+0x34>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val); // ENB
 800124a:	4b04      	ldr	r3, [pc, #16]	@ (800125c <Set_PWM_EN+0x34>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	88fa      	ldrh	r2, [r7, #6]
 8001250:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000028 	.word	0x20000028

08001260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	4a0f      	ldr	r2, [pc, #60]	@ (80012ac <HAL_MspInit+0x4c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001274:	6453      	str	r3, [r2, #68]	@ 0x44
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_MspInit+0x4c>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	@ 0x40
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <HAL_TIM_Base_MspInit+0x3c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10d      	bne.n	80012de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_TIM_Base_MspInit+0x40>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a09      	ldr	r2, [pc, #36]	@ (80012f0 <HAL_TIM_Base_MspInit+0x40>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <HAL_TIM_Base_MspInit+0x40>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a12      	ldr	r2, [pc, #72]	@ (800135c <HAL_TIM_MspPostInit+0x68>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d11e      	bne.n	8001354 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <HAL_TIM_MspPostInit+0x6c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a10      	ldr	r2, [pc, #64]	@ (8001360 <HAL_TIM_MspPostInit+0x6c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <HAL_TIM_MspPostInit+0x6c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENB_Pin|ENA_Pin;
 8001332:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001336:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001344:	2301      	movs	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	@ (8001364 <HAL_TIM_MspPostInit+0x70>)
 8001350:	f000 fb54 	bl	80019fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010000 	.word	0x40010000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	@ 0x30
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a49      	ldr	r2, [pc, #292]	@ (80014ac <HAL_UART_MspInit+0x144>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d153      	bne.n	8001432 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	4b48      	ldr	r3, [pc, #288]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	4a47      	ldr	r2, [pc, #284]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	6453      	str	r3, [r2, #68]	@ 0x44
 800139a:	4b45      	ldr	r3, [pc, #276]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a40      	ldr	r2, [pc, #256]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b3a      	ldr	r3, [pc, #232]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a39      	ldr	r2, [pc, #228]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f0:	2307      	movs	r3, #7
 80013f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	482e      	ldr	r0, [pc, #184]	@ (80014b4 <HAL_UART_MspInit+0x14c>)
 80013fc:	f000 fafe 	bl	80019fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001400:	2340      	movs	r3, #64	@ 0x40
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001410:	2307      	movs	r3, #7
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4827      	ldr	r0, [pc, #156]	@ (80014b8 <HAL_UART_MspInit+0x150>)
 800141c:	f000 faee 	bl	80019fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2025      	movs	r0, #37	@ 0x25
 8001426:	f000 fa20 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800142a:	2025      	movs	r0, #37	@ 0x25
 800142c:	f000 fa39 	bl	80018a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001430:	e038      	b.n	80014a4 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a21      	ldr	r2, [pc, #132]	@ (80014bc <HAL_UART_MspInit+0x154>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d133      	bne.n	80014a4 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	4a1a      	ldr	r2, [pc, #104]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800144a:	6413      	str	r3, [r2, #64]	@ 0x40
 800144c:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001460:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6313      	str	r3, [r2, #48]	@ 0x30
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001474:	230c      	movs	r3, #12
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001484:	2307      	movs	r3, #7
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <HAL_UART_MspInit+0x14c>)
 8001490:	f000 fab4 	bl	80019fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2026      	movs	r0, #38	@ 0x26
 800149a:	f000 f9e6 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800149e:	2026      	movs	r0, #38	@ 0x26
 80014a0:	f000 f9ff 	bl	80018a2 <HAL_NVIC_EnableIRQ>
}
 80014a4:	bf00      	nop
 80014a6:	3730      	adds	r7, #48	@ 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40004400 	.word	0x40004400

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f8ad 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <USART1_IRQHandler+0x10>)
 8001526:	f002 f84b 	bl	80035c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000070 	.word	0x20000070

08001534 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <USART2_IRQHandler+0x10>)
 800153a:	f002 f841 	bl	80035c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200000b8 	.word	0x200000b8

08001548 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800154c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001550:	f000 fc0c 	bl	8001d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001580:	f7ff ffea 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	@ (80015bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f002 ff67 	bl	800447c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7ff fbd7 	bl	8000d60 <main>
  bx  lr    
 80015b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015c0:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 80015c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015c8:	20000114 	.word	0x20000114

080015cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <HAL_Init+0x40>)
 80015da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <HAL_Init+0x40>)
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	@ (8001610 <HAL_Init+0x40>)
 80015f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f92b 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f808 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff fe2c 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_InitTick+0x54>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_InitTick+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162a:	fbb3 f3f1 	udiv	r3, r3, r1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f943 	bl	80018be <HAL_SYSTICK_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00e      	b.n	8001660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d80a      	bhi.n	800165e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f000 f90b 	bl	800186a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001654:	4a06      	ldr	r2, [pc, #24]	@ (8001670 <HAL_InitTick+0x5c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000000 	.word	0x20000000
 800166c:	20000008 	.word	0x20000008
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_IncTick+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x24>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <HAL_IncTick+0x24>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000008 	.word	0x20000008
 8001698:	20000110 	.word	0x20000110

0800169c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <HAL_GetTick+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000110 	.word	0x20000110

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	@ (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	@ 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f7ff ff8e 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff29 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff3e 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff8e 	bl	80017a8 <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5d 	bl	8001754 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff31 	bl	8001718 <__NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffa2 	bl	8001810 <SysTick_Config>
 80018cc:	4603      	mov	r3, r0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff feda 	bl	800169c <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d008      	beq.n	8001908 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2280      	movs	r2, #128	@ 0x80
 80018fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e052      	b.n	80019ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0216 	bic.w	r2, r2, #22
 8001916:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001926:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <HAL_DMA_Abort+0x62>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0208 	bic.w	r2, r2, #8
 8001946:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001958:	e013      	b.n	8001982 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800195a:	f7ff fe9f 	bl	800169c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b05      	cmp	r3, #5
 8001966:	d90c      	bls.n	8001982 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2203      	movs	r2, #3
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e015      	b.n	80019ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e4      	bne.n	800195a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001994:	223f      	movs	r2, #63	@ 0x3f
 8001996:	409a      	lsls	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d004      	beq.n	80019d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2280      	movs	r2, #128	@ 0x80
 80019ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e00c      	b.n	80019ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2205      	movs	r2, #5
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	e159      	b.n	8001ccc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	f040 8148 	bne.w	8001cc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d005      	beq.n	8001a4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d130      	bne.n	8001ab0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 0201 	and.w	r2, r3, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d017      	beq.n	8001aec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d123      	bne.n	8001b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	08da      	lsrs	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	69b9      	ldr	r1, [r7, #24]
 8001b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0203 	and.w	r2, r3, #3
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80a2 	beq.w	8001cc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <HAL_GPIO_Init+0x2e8>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a56      	ldr	r2, [pc, #344]	@ (8001ce4 <HAL_GPIO_Init+0x2e8>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b54      	ldr	r3, [pc, #336]	@ (8001ce4 <HAL_GPIO_Init+0x2e8>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9e:	4a52      	ldr	r2, [pc, #328]	@ (8001ce8 <HAL_GPIO_Init+0x2ec>)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a49      	ldr	r2, [pc, #292]	@ (8001cec <HAL_GPIO_Init+0x2f0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d019      	beq.n	8001bfe <HAL_GPIO_Init+0x202>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a48      	ldr	r2, [pc, #288]	@ (8001cf0 <HAL_GPIO_Init+0x2f4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0x1fe>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a47      	ldr	r2, [pc, #284]	@ (8001cf4 <HAL_GPIO_Init+0x2f8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_GPIO_Init+0x1fa>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a46      	ldr	r2, [pc, #280]	@ (8001cf8 <HAL_GPIO_Init+0x2fc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x1f6>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a45      	ldr	r2, [pc, #276]	@ (8001cfc <HAL_GPIO_Init+0x300>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_GPIO_Init+0x1f2>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e008      	b.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bee:	2307      	movs	r3, #7
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e004      	b.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e002      	b.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	f002 0203 	and.w	r2, r2, #3
 8001c06:	0092      	lsls	r2, r2, #2
 8001c08:	4093      	lsls	r3, r2
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c10:	4935      	ldr	r1, [pc, #212]	@ (8001ce8 <HAL_GPIO_Init+0x2ec>)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1e:	4b38      	ldr	r3, [pc, #224]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c42:	4a2f      	ldr	r2, [pc, #188]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c48:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c6c:	4a24      	ldr	r2, [pc, #144]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c72:	4b23      	ldr	r3, [pc, #140]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c96:	4a1a      	ldr	r2, [pc, #104]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b0f      	cmp	r3, #15
 8001cd0:	f67f aea2 	bls.w	8001a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3724      	adds	r7, #36	@ 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40013800 	.word	0x40013800
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	619a      	str	r2, [r3, #24]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d48:	887a      	ldrh	r2, [r7, #2]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	041a      	lsls	r2, r3, #16
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	400b      	ands	r3, r1
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	619a      	str	r2, [r3, #24]
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d82:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe ff18 	bl	8000bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e267      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d075      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dba:	4b88      	ldr	r3, [pc, #544]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d00c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b85      	ldr	r3, [pc, #532]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d112      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4b82      	ldr	r3, [pc, #520]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d05b      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x108>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d157      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e242      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_OscConfig+0x74>
 8001e02:	4b76      	ldr	r3, [pc, #472]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a75      	ldr	r2, [pc, #468]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b70      	ldr	r3, [pc, #448]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e34:	4b69      	ldr	r3, [pc, #420]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a68      	ldr	r2, [pc, #416]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b66      	ldr	r3, [pc, #408]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a65      	ldr	r2, [pc, #404]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fc22 	bl	800169c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fc1e 	bl	800169c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	@ 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e207      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xc0>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fc0e 	bl	800169c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fc0a 	bl	800169c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1f3      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b51      	ldr	r3, [pc, #324]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0xe8>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebe:	4b47      	ldr	r3, [pc, #284]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eca:	4b44      	ldr	r3, [pc, #272]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b41      	ldr	r3, [pc, #260]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e1c7      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b3b      	ldr	r3, [pc, #236]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4937      	ldr	r1, [pc, #220]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b34      	ldr	r3, [pc, #208]	@ (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff fbc3 	bl	800169c <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fbbf 	bl	800169c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1a8      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4925      	ldr	r1, [pc, #148]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff fba2 	bl	800169c <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fb9e 	bl	800169c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e187      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d036      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d016      	beq.n	8001fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff fb82 	bl	800169c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fb7e 	bl	800169c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e167      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x200>
 8001fba:	e01b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fb6b 	bl	800169c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	e00e      	b.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fca:	f7ff fb67 	bl	800169c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d907      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e150      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	42470000 	.word	0x42470000
 8001fe4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	4b88      	ldr	r3, [pc, #544]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ea      	bne.n	8001fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8097 	beq.w	8002130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b81      	ldr	r3, [pc, #516]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b7d      	ldr	r3, [pc, #500]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a7c      	ldr	r2, [pc, #496]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b7a      	ldr	r3, [pc, #488]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b77      	ldr	r3, [pc, #476]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b74      	ldr	r3, [pc, #464]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a73      	ldr	r2, [pc, #460]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7ff fb27 	bl	800169c <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7ff fb23 	bl	800169c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e10c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b6a      	ldr	r3, [pc, #424]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x2ea>
 8002078:	4b64      	ldr	r3, [pc, #400]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	4a63      	ldr	r2, [pc, #396]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	@ 0x70
 8002084:	e01c      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x30c>
 800208e:	4b5f      	ldr	r3, [pc, #380]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002092:	4a5e      	ldr	r2, [pc, #376]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6713      	str	r3, [r2, #112]	@ 0x70
 800209a:	4b5c      	ldr	r3, [pc, #368]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	4a5b      	ldr	r2, [pc, #364]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 80020a8:	4b58      	ldr	r3, [pc, #352]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ac:	4a57      	ldr	r2, [pc, #348]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b4:	4b55      	ldr	r3, [pc, #340]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b8:	4a54      	ldr	r2, [pc, #336]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020ba:	f023 0304 	bic.w	r3, r3, #4
 80020be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d015      	beq.n	80020f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff fae8 	bl	800169c <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7ff fae4 	bl	800169c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e0cb      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e6:	4b49      	ldr	r3, [pc, #292]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0ee      	beq.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7ff fad2 	bl	800169c <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7ff face 	bl	800169c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0b5      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002112:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ee      	bne.n	80020fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002124:	4b39      	ldr	r3, [pc, #228]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	4a38      	ldr	r2, [pc, #224]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800212a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800212e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a1 	beq.w	800227c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800213a:	4b34      	ldr	r3, [pc, #208]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d05c      	beq.n	8002200 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d141      	bne.n	80021d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff faa2 	bl	800169c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff fa9e 	bl	800169c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e087      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	4b27      	ldr	r3, [pc, #156]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	491b      	ldr	r1, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff fa77 	bl	800169c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff fa73 	bl	800169c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e05c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x416>
 80021d0:	e054      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fa60 	bl	800169c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff fa5c 	bl	800169c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e045      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
 80021fe:	e03d      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e038      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000
 8002214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x4ec>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d028      	beq.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d121      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d11a      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800224e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	3b01      	subs	r3, #1
 8002262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0cc      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b68      	ldr	r3, [pc, #416]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d90c      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b65      	ldr	r3, [pc, #404]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b63      	ldr	r3, [pc, #396]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b8      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e0:	4b59      	ldr	r3, [pc, #356]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a58      	ldr	r2, [pc, #352]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f8:	4b53      	ldr	r3, [pc, #332]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a52      	ldr	r2, [pc, #328]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002304:	4b50      	ldr	r3, [pc, #320]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	494d      	ldr	r1, [pc, #308]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d044      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b47      	ldr	r3, [pc, #284]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d119      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e07f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	2b03      	cmp	r3, #3
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b3f      	ldr	r3, [pc, #252]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3b      	ldr	r3, [pc, #236]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e067      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4934      	ldr	r1, [pc, #208]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7ff f98e 	bl	800169c <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7ff f98a 	bl	800169c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e04f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2b      	ldr	r3, [pc, #172]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b25      	ldr	r3, [pc, #148]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d20c      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e032      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e0:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4916      	ldr	r1, [pc, #88]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fe:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	490e      	ldr	r1, [pc, #56]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002412:	f000 f821 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002416:	4602      	mov	r2, r0
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	490a      	ldr	r1, [pc, #40]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	5ccb      	ldrb	r3, [r1, r3]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff f8ee 	bl	8001614 <HAL_InitTick>

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00
 8002448:	40023800 	.word	0x40023800
 800244c:	08004528 	.word	0x08004528
 8002450:	20000000 	.word	0x20000000
 8002454:	20000004 	.word	0x20000004

08002458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800245c:	b094      	sub	sp, #80	@ 0x50
 800245e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002470:	4b79      	ldr	r3, [pc, #484]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	d00d      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x40>
 800247c:	2b08      	cmp	r3, #8
 800247e:	f200 80e1 	bhi.w	8002644 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x34>
 8002486:	2b04      	cmp	r3, #4
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x3a>
 800248a:	e0db      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b73      	ldr	r3, [pc, #460]	@ (800265c <HAL_RCC_GetSysClockFreq+0x204>)
 800248e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002490:	e0db      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002492:	4b73      	ldr	r3, [pc, #460]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x208>)
 8002494:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002496:	e0d8      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002498:	4b6f      	ldr	r3, [pc, #444]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d063      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	2200      	movs	r2, #0
 80024b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024ca:	4622      	mov	r2, r4
 80024cc:	462b      	mov	r3, r5
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	0159      	lsls	r1, r3, #5
 80024d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024dc:	0150      	lsls	r0, r2, #5
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4621      	mov	r1, r4
 80024e4:	1a51      	subs	r1, r2, r1
 80024e6:	6139      	str	r1, [r7, #16]
 80024e8:	4629      	mov	r1, r5
 80024ea:	eb63 0301 	sbc.w	r3, r3, r1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024fc:	4659      	mov	r1, fp
 80024fe:	018b      	lsls	r3, r1, #6
 8002500:	4651      	mov	r1, sl
 8002502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002506:	4651      	mov	r1, sl
 8002508:	018a      	lsls	r2, r1, #6
 800250a:	4651      	mov	r1, sl
 800250c:	ebb2 0801 	subs.w	r8, r2, r1
 8002510:	4659      	mov	r1, fp
 8002512:	eb63 0901 	sbc.w	r9, r3, r1
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800252a:	4690      	mov	r8, r2
 800252c:	4699      	mov	r9, r3
 800252e:	4623      	mov	r3, r4
 8002530:	eb18 0303 	adds.w	r3, r8, r3
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	462b      	mov	r3, r5
 8002538:	eb49 0303 	adc.w	r3, r9, r3
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800254a:	4629      	mov	r1, r5
 800254c:	024b      	lsls	r3, r1, #9
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002554:	4621      	mov	r1, r4
 8002556:	024a      	lsls	r2, r1, #9
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255e:	2200      	movs	r2, #0
 8002560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002562:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002564:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002568:	f7fe f93a 	bl	80007e0 <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4613      	mov	r3, r2
 8002572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002574:	e058      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b38      	ldr	r3, [pc, #224]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	2200      	movs	r2, #0
 800257e:	4618      	mov	r0, r3
 8002580:	4611      	mov	r1, r2
 8002582:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
 800258c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002590:	4642      	mov	r2, r8
 8002592:	464b      	mov	r3, r9
 8002594:	f04f 0000 	mov.w	r0, #0
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	0159      	lsls	r1, r3, #5
 800259e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a2:	0150      	lsls	r0, r2, #5
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4641      	mov	r1, r8
 80025aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ae:	4649      	mov	r1, r9
 80025b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025c8:	ebb2 040a 	subs.w	r4, r2, sl
 80025cc:	eb63 050b 	sbc.w	r5, r3, fp
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	00eb      	lsls	r3, r5, #3
 80025da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025de:	00e2      	lsls	r2, r4, #3
 80025e0:	4614      	mov	r4, r2
 80025e2:	461d      	mov	r5, r3
 80025e4:	4643      	mov	r3, r8
 80025e6:	18e3      	adds	r3, r4, r3
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	464b      	mov	r3, r9
 80025ec:	eb45 0303 	adc.w	r3, r5, r3
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025fe:	4629      	mov	r1, r5
 8002600:	028b      	lsls	r3, r1, #10
 8002602:	4621      	mov	r1, r4
 8002604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002608:	4621      	mov	r1, r4
 800260a:	028a      	lsls	r2, r1, #10
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002612:	2200      	movs	r2, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	61fa      	str	r2, [r7, #28]
 8002618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800261c:	f7fe f8e0 	bl	80007e0 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002638:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800263a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RCC_GetSysClockFreq+0x204>)
 8002646:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800264c:	4618      	mov	r0, r3
 800264e:	3750      	adds	r7, #80	@ 0x50
 8002650:	46bd      	mov	sp, r7
 8002652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	00f42400 	.word	0x00f42400
 8002660:	007a1200 	.word	0x007a1200

08002664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002668:	4b03      	ldr	r3, [pc, #12]	@ (8002678 <HAL_RCC_GetHCLKFreq+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000000 	.word	0x20000000

0800267c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002680:	f7ff fff0 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	@ (800269c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0a9b      	lsrs	r3, r3, #10
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4903      	ldr	r1, [pc, #12]	@ (80026a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	08004538 	.word	0x08004538

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a8:	f7ff ffdc 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0b5b      	lsrs	r3, r3, #13
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	@ (80026c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	08004538 	.word	0x08004538

080026cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e041      	b.n	8002762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fddc 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f000 fac0 	bl	8002c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e041      	b.n	8002800 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f839 	bl	8002808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f000 fa71 	bl	8002c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_TIM_PWM_Start+0x24>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	bf14      	ite	ne
 8002838:	2301      	movne	r3, #1
 800283a:	2300      	moveq	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e022      	b.n	8002886 <HAL_TIM_PWM_Start+0x6a>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b04      	cmp	r3, #4
 8002844:	d109      	bne.n	800285a <HAL_TIM_PWM_Start+0x3e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	e015      	b.n	8002886 <HAL_TIM_PWM_Start+0x6a>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d109      	bne.n	8002874 <HAL_TIM_PWM_Start+0x58>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	e008      	b.n	8002886 <HAL_TIM_PWM_Start+0x6a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e068      	b.n	8002960 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d104      	bne.n	800289e <HAL_TIM_PWM_Start+0x82>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800289c:	e013      	b.n	80028c6 <HAL_TIM_PWM_Start+0xaa>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d104      	bne.n	80028ae <HAL_TIM_PWM_Start+0x92>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028ac:	e00b      	b.n	80028c6 <HAL_TIM_PWM_Start+0xaa>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d104      	bne.n	80028be <HAL_TIM_PWM_Start+0xa2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028bc:	e003      	b.n	80028c6 <HAL_TIM_PWM_Start+0xaa>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	6839      	ldr	r1, [r7, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fc90 	bl	80031f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a23      	ldr	r2, [pc, #140]	@ (8002968 <HAL_TIM_PWM_Start+0x14c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d107      	bne.n	80028ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002968 <HAL_TIM_PWM_Start+0x14c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d018      	beq.n	800292a <HAL_TIM_PWM_Start+0x10e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002900:	d013      	beq.n	800292a <HAL_TIM_PWM_Start+0x10e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a19      	ldr	r2, [pc, #100]	@ (800296c <HAL_TIM_PWM_Start+0x150>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00e      	beq.n	800292a <HAL_TIM_PWM_Start+0x10e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <HAL_TIM_PWM_Start+0x154>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_TIM_PWM_Start+0x10e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a16      	ldr	r2, [pc, #88]	@ (8002974 <HAL_TIM_PWM_Start+0x158>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_TIM_PWM_Start+0x10e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <HAL_TIM_PWM_Start+0x15c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d111      	bne.n	800294e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b06      	cmp	r3, #6
 800293a:	d010      	beq.n	800295e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294c:	e007      	b.n	800295e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0201 	orr.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40010000 	.word	0x40010000
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40000c00 	.word	0x40000c00
 8002978:	40014000 	.word	0x40014000

0800297c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002996:	2302      	movs	r3, #2
 8002998:	e0ae      	b.n	8002af8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	f200 809f 	bhi.w	8002ae8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80029aa:	a201      	add	r2, pc, #4	@ (adr r2, 80029b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b0:	080029e5 	.word	0x080029e5
 80029b4:	08002ae9 	.word	0x08002ae9
 80029b8:	08002ae9 	.word	0x08002ae9
 80029bc:	08002ae9 	.word	0x08002ae9
 80029c0:	08002a25 	.word	0x08002a25
 80029c4:	08002ae9 	.word	0x08002ae9
 80029c8:	08002ae9 	.word	0x08002ae9
 80029cc:	08002ae9 	.word	0x08002ae9
 80029d0:	08002a67 	.word	0x08002a67
 80029d4:	08002ae9 	.word	0x08002ae9
 80029d8:	08002ae9 	.word	0x08002ae9
 80029dc:	08002ae9 	.word	0x08002ae9
 80029e0:	08002aa7 	.word	0x08002aa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f9dc 	bl	8002da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0208 	orr.w	r2, r2, #8
 80029fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0204 	bic.w	r2, r2, #4
 8002a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6999      	ldr	r1, [r3, #24]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	619a      	str	r2, [r3, #24]
      break;
 8002a22:	e064      	b.n	8002aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fa22 	bl	8002e74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6999      	ldr	r1, [r3, #24]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	021a      	lsls	r2, r3, #8
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	619a      	str	r2, [r3, #24]
      break;
 8002a64:	e043      	b.n	8002aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fa6d 	bl	8002f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69da      	ldr	r2, [r3, #28]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0208 	orr.w	r2, r2, #8
 8002a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0204 	bic.w	r2, r2, #4
 8002a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69d9      	ldr	r1, [r3, #28]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	61da      	str	r2, [r3, #28]
      break;
 8002aa4:	e023      	b.n	8002aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fab7 	bl	8003020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69d9      	ldr	r1, [r3, #28]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	021a      	lsls	r2, r3, #8
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	61da      	str	r2, [r3, #28]
      break;
 8002ae6:	e002      	b.n	8002aee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	75fb      	strb	r3, [r7, #23]
      break;
 8002aec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIM_ConfigClockSource+0x1c>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0b4      	b.n	8002c86 <HAL_TIM_ConfigClockSource+0x186>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b54:	d03e      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0xd4>
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b5a:	f200 8087 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b62:	f000 8086 	beq.w	8002c72 <HAL_TIM_ConfigClockSource+0x172>
 8002b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6a:	d87f      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b70      	cmp	r3, #112	@ 0x70
 8002b6e:	d01a      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0xa6>
 8002b70:	2b70      	cmp	r3, #112	@ 0x70
 8002b72:	d87b      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b60      	cmp	r3, #96	@ 0x60
 8002b76:	d050      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x11a>
 8002b78:	2b60      	cmp	r3, #96	@ 0x60
 8002b7a:	d877      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b7c:	2b50      	cmp	r3, #80	@ 0x50
 8002b7e:	d03c      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xfa>
 8002b80:	2b50      	cmp	r3, #80	@ 0x50
 8002b82:	d873      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b40      	cmp	r3, #64	@ 0x40
 8002b86:	d058      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x13a>
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	d86f      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	2b30      	cmp	r3, #48	@ 0x30
 8002b8e:	d064      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002b90:	2b30      	cmp	r3, #48	@ 0x30
 8002b92:	d86b      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d060      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d867      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05c      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d05a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002ba4:	e062      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bb6:	f000 fafd 	bl	80031b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	609a      	str	r2, [r3, #8]
      break;
 8002bd2:	e04f      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002be4:	f000 fae6 	bl	80031b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bf6:	609a      	str	r2, [r3, #8]
      break;
 8002bf8:	e03c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 fa5a 	bl	80030c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2150      	movs	r1, #80	@ 0x50
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fab3 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 8002c18:	e02c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 fa79 	bl	800311e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2160      	movs	r1, #96	@ 0x60
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 faa3 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 8002c38:	e01c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 fa3a 	bl	80030c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2140      	movs	r1, #64	@ 0x40
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fa93 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 8002c58:	e00c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f000 fa8a 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 8002c6a:	e003      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e000      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a3a      	ldr	r2, [pc, #232]	@ (8002d8c <TIM_Base_SetConfig+0xfc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00f      	beq.n	8002cc8 <TIM_Base_SetConfig+0x38>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cae:	d00b      	beq.n	8002cc8 <TIM_Base_SetConfig+0x38>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a37      	ldr	r2, [pc, #220]	@ (8002d90 <TIM_Base_SetConfig+0x100>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <TIM_Base_SetConfig+0x38>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a36      	ldr	r2, [pc, #216]	@ (8002d94 <TIM_Base_SetConfig+0x104>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_Base_SetConfig+0x38>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a35      	ldr	r2, [pc, #212]	@ (8002d98 <TIM_Base_SetConfig+0x108>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d108      	bne.n	8002cda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d8c <TIM_Base_SetConfig+0xfc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01b      	beq.n	8002d1a <TIM_Base_SetConfig+0x8a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce8:	d017      	beq.n	8002d1a <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a28      	ldr	r2, [pc, #160]	@ (8002d90 <TIM_Base_SetConfig+0x100>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a27      	ldr	r2, [pc, #156]	@ (8002d94 <TIM_Base_SetConfig+0x104>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00f      	beq.n	8002d1a <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a26      	ldr	r2, [pc, #152]	@ (8002d98 <TIM_Base_SetConfig+0x108>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00b      	beq.n	8002d1a <TIM_Base_SetConfig+0x8a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a25      	ldr	r2, [pc, #148]	@ (8002d9c <TIM_Base_SetConfig+0x10c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <TIM_Base_SetConfig+0x8a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a24      	ldr	r2, [pc, #144]	@ (8002da0 <TIM_Base_SetConfig+0x110>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <TIM_Base_SetConfig+0x8a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a23      	ldr	r2, [pc, #140]	@ (8002da4 <TIM_Base_SetConfig+0x114>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d108      	bne.n	8002d2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a0e      	ldr	r2, [pc, #56]	@ (8002d8c <TIM_Base_SetConfig+0xfc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d103      	bne.n	8002d60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f023 0201 	bic.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	611a      	str	r2, [r3, #16]
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40014000 	.word	0x40014000
 8002da0:	40014400 	.word	0x40014400
 8002da4:	40014800 	.word	0x40014800

08002da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f023 0201 	bic.w	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 0302 	bic.w	r3, r3, #2
 8002df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002e70 <TIM_OC1_SetConfig+0xc8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10c      	bne.n	8002e1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f023 0308 	bic.w	r3, r3, #8
 8002e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f023 0304 	bic.w	r3, r3, #4
 8002e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a13      	ldr	r2, [pc, #76]	@ (8002e70 <TIM_OC1_SetConfig+0xc8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d111      	bne.n	8002e4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	621a      	str	r2, [r3, #32]
}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40010000 	.word	0x40010000

08002e74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f023 0210 	bic.w	r2, r3, #16
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0320 	bic.w	r3, r3, #32
 8002ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a1e      	ldr	r2, [pc, #120]	@ (8002f48 <TIM_OC2_SetConfig+0xd4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d10d      	bne.n	8002ef0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a15      	ldr	r2, [pc, #84]	@ (8002f48 <TIM_OC2_SetConfig+0xd4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d113      	bne.n	8002f20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000

08002f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800301c <TIM_OC3_SetConfig+0xd0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10d      	bne.n	8002fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <TIM_OC3_SetConfig+0xd0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d113      	bne.n	8002ff6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	621a      	str	r2, [r3, #32]
}
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40010000 	.word	0x40010000

08003020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800304e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800306a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	031b      	lsls	r3, r3, #12
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a10      	ldr	r2, [pc, #64]	@ (80030bc <TIM_OC4_SetConfig+0x9c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d109      	bne.n	8003094 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000

080030c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f023 030a 	bic.w	r3, r3, #10
 80030fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800311e:	b480      	push	{r7}
 8003120:	b087      	sub	sp, #28
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 0210 	bic.w	r2, r3, #16
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	031b      	lsls	r3, r3, #12
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800315a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800317e:	b480      	push	{r7}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	f043 0307 	orr.w	r3, r3, #7
 80031a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	021a      	lsls	r2, r3, #8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	609a      	str	r2, [r3, #8]
}
 80031e8:	bf00      	nop
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2201      	movs	r2, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a1a      	ldr	r2, [r3, #32]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	43db      	mvns	r3, r3
 8003216:	401a      	ands	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1a      	ldr	r2, [r3, #32]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	431a      	orrs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003254:	2302      	movs	r3, #2
 8003256:	e050      	b.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1c      	ldr	r2, [pc, #112]	@ (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d018      	beq.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a4:	d013      	beq.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a18      	ldr	r2, [pc, #96]	@ (800330c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00e      	beq.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a16      	ldr	r2, [pc, #88]	@ (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a15      	ldr	r2, [pc, #84]	@ (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a13      	ldr	r2, [pc, #76]	@ (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d10c      	bne.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40014000 	.word	0x40014000

0800331c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003334:	2302      	movs	r3, #2
 8003336:	e03d      	b.n	80033b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e042      	b.n	8003458 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd ffbe 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	@ 0x24
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fdbd 	bl	8003f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	@ 0x28
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b20      	cmp	r3, #32
 800347e:	d175      	bne.n	800356c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Transmit+0x2c>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e06e      	b.n	800356e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2221      	movs	r2, #33	@ 0x21
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800349e:	f7fe f8fd 	bl	800169c <HAL_GetTick>
 80034a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b8:	d108      	bne.n	80034cc <HAL_UART_Transmit+0x6c>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d104      	bne.n	80034cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	e003      	b.n	80034d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034d4:	e02e      	b.n	8003534 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2200      	movs	r2, #0
 80034de:	2180      	movs	r1, #128	@ 0x80
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fb1f 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e03a      	b.n	800356e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800350c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	3302      	adds	r3, #2
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	e007      	b.n	8003526 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	3301      	adds	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1cb      	bne.n	80034d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	2140      	movs	r1, #64	@ 0x40
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 faeb 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e006      	b.n	800356e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	4613      	mov	r3, r2
 8003582:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b20      	cmp	r3, #32
 800358e:	d112      	bne.n	80035b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_UART_Receive_IT+0x26>
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e00b      	b.n	80035b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	461a      	mov	r2, r3
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fb12 	bl	8003bd6 <UART_Start_Receive_IT>
 80035b2:	4603      	mov	r3, r0
 80035b4:	e000      	b.n	80035b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b0ba      	sub	sp, #232	@ 0xe8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80035fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10f      	bne.n	8003626 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_UART_IRQHandler+0x66>
 8003612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fbf2 	bl	8003e08 <UART_Receive_IT>
      return;
 8003624:	e25b      	b.n	8003ade <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 80de 	beq.w	80037ec <HAL_UART_IRQHandler+0x22c>
 8003630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800363c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003640:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80d1 	beq.w	80037ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_UART_IRQHandler+0xae>
 8003656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800365a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_UART_IRQHandler+0xd2>
 800367a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f043 0202 	orr.w	r2, r3, #2
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_UART_IRQHandler+0xf6>
 800369e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	f043 0204 	orr.w	r2, r3, #4
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d011      	beq.n	80036e6 <HAL_UART_IRQHandler+0x126>
 80036c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f043 0208 	orr.w	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 81f2 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_UART_IRQHandler+0x14e>
 80036fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fb7d 	bl	8003e08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003718:	2b40      	cmp	r3, #64	@ 0x40
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <HAL_UART_IRQHandler+0x17a>
 8003732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003736:	2b00      	cmp	r3, #0
 8003738:	d04f      	beq.n	80037da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa85 	bl	8003c4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374a:	2b40      	cmp	r3, #64	@ 0x40
 800374c:	d141      	bne.n	80037d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3314      	adds	r3, #20
 8003754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800376c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3314      	adds	r3, #20
 8003776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800377a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800377e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1d9      	bne.n	800374e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d013      	beq.n	80037ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a6:	4a7e      	ldr	r2, [pc, #504]	@ (80039a0 <HAL_UART_IRQHandler+0x3e0>)
 80037a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe f901 	bl	80019b6 <HAL_DMA_Abort_IT>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d016      	beq.n	80037e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037c4:	4610      	mov	r0, r2
 80037c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	e00e      	b.n	80037e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f994 	bl	8003af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	e00a      	b.n	80037e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f990 	bl	8003af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d8:	e006      	b.n	80037e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f98c 	bl	8003af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80037e6:	e175      	b.n	8003ad4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e8:	bf00      	nop
    return;
 80037ea:	e173      	b.n	8003ad4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	f040 814f 	bne.w	8003a94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8148 	beq.w	8003a94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8141 	beq.w	8003a94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003832:	2b40      	cmp	r3, #64	@ 0x40
 8003834:	f040 80b6 	bne.w	80039a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003844:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8145 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003856:	429a      	cmp	r2, r3
 8003858:	f080 813e 	bcs.w	8003ad8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003862:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800386e:	f000 8088 	beq.w	8003982 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	330c      	adds	r3, #12
 8003878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003888:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800388c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800389e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1d9      	bne.n	8003872 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3314      	adds	r3, #20
 80038c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3314      	adds	r3, #20
 80038de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e1      	bne.n	80038be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800390a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800390c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3314      	adds	r3, #20
 800391a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800391e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003920:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003924:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800392c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e3      	bne.n	80038fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003952:	f023 0310 	bic.w	r3, r3, #16
 8003956:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003964:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003966:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800396a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e3      	bne.n	8003940 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397c:	4618      	mov	r0, r3
 800397e:	f7fd ffaa 	bl	80018d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003990:	b29b      	uxth	r3, r3
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	b29b      	uxth	r3, r3
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8b7 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800399e:	e09b      	b.n	8003ad8 <HAL_UART_IRQHandler+0x518>
 80039a0:	08003d11 	.word	0x08003d11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 808e 	beq.w	8003adc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8089 	beq.w	8003adc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	330c      	adds	r3, #12
 80039d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	330c      	adds	r3, #12
 80039ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80039f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e3      	bne.n	80039ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	623b      	str	r3, [r7, #32]
   return(result);
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3314      	adds	r3, #20
 8003a22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a26:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e3      	bne.n	8003a02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0310 	bic.w	r3, r3, #16
 8003a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a6c:	61fa      	str	r2, [r7, #28]
 8003a6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	69b9      	ldr	r1, [r7, #24]
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	617b      	str	r3, [r7, #20]
   return(result);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e3      	bne.n	8003a48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f83d 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a92:	e023      	b.n	8003adc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d009      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x4f4>
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f943 	bl	8003d38 <UART_Transmit_IT>
    return;
 8003ab2:	e014      	b.n	8003ade <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00e      	beq.n	8003ade <HAL_UART_IRQHandler+0x51e>
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f983 	bl	8003dd8 <UART_EndTransmit_IT>
    return;
 8003ad2:	e004      	b.n	8003ade <HAL_UART_IRQHandler+0x51e>
    return;
 8003ad4:	bf00      	nop
 8003ad6:	e002      	b.n	8003ade <HAL_UART_IRQHandler+0x51e>
      return;
 8003ad8:	bf00      	nop
 8003ada:	e000      	b.n	8003ade <HAL_UART_IRQHandler+0x51e>
      return;
 8003adc:	bf00      	nop
  }
}
 8003ade:	37e8      	adds	r7, #232	@ 0xe8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b34:	e03b      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d037      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fd fdad 	bl	800169c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	6a3a      	ldr	r2, [r7, #32]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e03a      	b.n	8003bce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d023      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b80      	cmp	r3, #128	@ 0x80
 8003b6a:	d020      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b40      	cmp	r3, #64	@ 0x40
 8003b70:	d01d      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d116      	bne.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f857 	bl	8003c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00f      	b.n	8003bce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2301      	moveq	r3, #1
 8003bc0:	2300      	movne	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d0b4      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	4613      	mov	r3, r2
 8003be2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2222      	movs	r2, #34	@ 0x22
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0220 	orr.w	r2, r2, #32
 8003c3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b095      	sub	sp, #84	@ 0x54
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c72:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e5      	bne.n	8003c52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3314      	adds	r3, #20
 8003c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e5      	bne.n	8003c86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d119      	bne.n	8003cf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f023 0310 	bic.w	r3, r3, #16
 8003cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ce2:	61ba      	str	r2, [r7, #24]
 8003ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	6979      	ldr	r1, [r7, #20]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	e841 2300 	strex	r3, r2, [r1]
 8003cee:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e5      	bne.n	8003cc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d04:	bf00      	nop
 8003d06:	3754      	adds	r7, #84	@ 0x54
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7ff fee4 	bl	8003af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b21      	cmp	r3, #33	@ 0x21
 8003d4a:	d13e      	bne.n	8003dca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d54:	d114      	bne.n	8003d80 <UART_Transmit_IT+0x48>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d110      	bne.n	8003d80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	1c9a      	adds	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]
 8003d7e:	e008      	b.n	8003d92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	1c59      	adds	r1, r3, #1
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6211      	str	r1, [r2, #32]
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10f      	bne.n	8003dc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003db4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff fe73 	bl	8003ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	@ 0x30
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b22      	cmp	r3, #34	@ 0x22
 8003e1a:	f040 80ae 	bne.w	8003f7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e26:	d117      	bne.n	8003e58 <UART_Receive_IT+0x50>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d113      	bne.n	8003e58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e56:	e026      	b.n	8003ea6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6a:	d007      	beq.n	8003e7c <UART_Receive_IT+0x74>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <UART_Receive_IT+0x82>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	e008      	b.n	8003e9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d15d      	bne.n	8003f76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0220 	bic.w	r2, r2, #32
 8003ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0201 	bic.w	r2, r2, #1
 8003ee8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d135      	bne.n	8003f6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	613b      	str	r3, [r7, #16]
   return(result);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f023 0310 	bic.w	r3, r3, #16
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	330c      	adds	r3, #12
 8003f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f26:	623a      	str	r2, [r7, #32]
 8003f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	69f9      	ldr	r1, [r7, #28]
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e5      	bne.n	8003f06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d10a      	bne.n	8003f5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f62:	4619      	mov	r1, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff fdd1 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
 8003f6a:	e002      	b.n	8003f72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7fc fe5b 	bl	8000c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e002      	b.n	8003f7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3730      	adds	r7, #48	@ 0x30
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b0c0      	sub	sp, #256	@ 0x100
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa0:	68d9      	ldr	r1, [r3, #12]
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	ea40 0301 	orr.w	r3, r0, r1
 8003fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fdc:	f021 010c 	bic.w	r1, r1, #12
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fea:	430b      	orrs	r3, r1
 8003fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffe:	6999      	ldr	r1, [r3, #24]
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	ea40 0301 	orr.w	r3, r0, r1
 800400a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b8f      	ldr	r3, [pc, #572]	@ (8004250 <UART_SetConfig+0x2cc>)
 8004014:	429a      	cmp	r2, r3
 8004016:	d005      	beq.n	8004024 <UART_SetConfig+0xa0>
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b8d      	ldr	r3, [pc, #564]	@ (8004254 <UART_SetConfig+0x2d0>)
 8004020:	429a      	cmp	r2, r3
 8004022:	d104      	bne.n	800402e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe fb3e 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8004028:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800402c:	e003      	b.n	8004036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7fe fb25 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 8004032:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004040:	f040 810c 	bne.w	800425c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800404e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004056:	4622      	mov	r2, r4
 8004058:	462b      	mov	r3, r5
 800405a:	1891      	adds	r1, r2, r2
 800405c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800405e:	415b      	adcs	r3, r3
 8004060:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004066:	4621      	mov	r1, r4
 8004068:	eb12 0801 	adds.w	r8, r2, r1
 800406c:	4629      	mov	r1, r5
 800406e:	eb43 0901 	adc.w	r9, r3, r1
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004086:	4690      	mov	r8, r2
 8004088:	4699      	mov	r9, r3
 800408a:	4623      	mov	r3, r4
 800408c:	eb18 0303 	adds.w	r3, r8, r3
 8004090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004094:	462b      	mov	r3, r5
 8004096:	eb49 0303 	adc.w	r3, r9, r3
 800409a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040b2:	460b      	mov	r3, r1
 80040b4:	18db      	adds	r3, r3, r3
 80040b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b8:	4613      	mov	r3, r2
 80040ba:	eb42 0303 	adc.w	r3, r2, r3
 80040be:	657b      	str	r3, [r7, #84]	@ 0x54
 80040c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040c8:	f7fc fb8a 	bl	80007e0 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4b61      	ldr	r3, [pc, #388]	@ (8004258 <UART_SetConfig+0x2d4>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	011c      	lsls	r4, r3, #4
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040f4:	415b      	adcs	r3, r3
 80040f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040fc:	4641      	mov	r1, r8
 80040fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004102:	4649      	mov	r1, r9
 8004104:	eb43 0b01 	adc.w	fp, r3, r1
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800411c:	4692      	mov	sl, r2
 800411e:	469b      	mov	fp, r3
 8004120:	4643      	mov	r3, r8
 8004122:	eb1a 0303 	adds.w	r3, sl, r3
 8004126:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800412a:	464b      	mov	r3, r9
 800412c:	eb4b 0303 	adc.w	r3, fp, r3
 8004130:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004140:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004148:	460b      	mov	r3, r1
 800414a:	18db      	adds	r3, r3, r3
 800414c:	643b      	str	r3, [r7, #64]	@ 0x40
 800414e:	4613      	mov	r3, r2
 8004150:	eb42 0303 	adc.w	r3, r2, r3
 8004154:	647b      	str	r3, [r7, #68]	@ 0x44
 8004156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800415a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800415e:	f7fc fb3f 	bl	80007e0 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4611      	mov	r1, r2
 8004168:	4b3b      	ldr	r3, [pc, #236]	@ (8004258 <UART_SetConfig+0x2d4>)
 800416a:	fba3 2301 	umull	r2, r3, r3, r1
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2264      	movs	r2, #100	@ 0x64
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	1acb      	subs	r3, r1, r3
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800417e:	4b36      	ldr	r3, [pc, #216]	@ (8004258 <UART_SetConfig+0x2d4>)
 8004180:	fba3 2302 	umull	r2, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800418c:	441c      	add	r4, r3
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004198:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800419c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041a8:	415b      	adcs	r3, r3
 80041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041b0:	4641      	mov	r1, r8
 80041b2:	1851      	adds	r1, r2, r1
 80041b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80041b6:	4649      	mov	r1, r9
 80041b8:	414b      	adcs	r3, r1
 80041ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041c8:	4659      	mov	r1, fp
 80041ca:	00cb      	lsls	r3, r1, #3
 80041cc:	4651      	mov	r1, sl
 80041ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d2:	4651      	mov	r1, sl
 80041d4:	00ca      	lsls	r2, r1, #3
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	4642      	mov	r2, r8
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041e4:	464b      	mov	r3, r9
 80041e6:	460a      	mov	r2, r1
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004204:	460b      	mov	r3, r1
 8004206:	18db      	adds	r3, r3, r3
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800420a:	4613      	mov	r3, r2
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800421a:	f7fc fae1 	bl	80007e0 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <UART_SetConfig+0x2d4>)
 8004224:	fba3 1302 	umull	r1, r3, r3, r2
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	2164      	movs	r1, #100	@ 0x64
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	3332      	adds	r3, #50	@ 0x32
 8004236:	4a08      	ldr	r2, [pc, #32]	@ (8004258 <UART_SetConfig+0x2d4>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f003 0207 	and.w	r2, r3, #7
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4422      	add	r2, r4
 800424a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800424c:	e106      	b.n	800445c <UART_SetConfig+0x4d8>
 800424e:	bf00      	nop
 8004250:	40011000 	.word	0x40011000
 8004254:	40011400 	.word	0x40011400
 8004258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004266:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800426a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800426e:	4642      	mov	r2, r8
 8004270:	464b      	mov	r3, r9
 8004272:	1891      	adds	r1, r2, r2
 8004274:	6239      	str	r1, [r7, #32]
 8004276:	415b      	adcs	r3, r3
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
 800427a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800427e:	4641      	mov	r1, r8
 8004280:	1854      	adds	r4, r2, r1
 8004282:	4649      	mov	r1, r9
 8004284:	eb43 0501 	adc.w	r5, r3, r1
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	00eb      	lsls	r3, r5, #3
 8004292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004296:	00e2      	lsls	r2, r4, #3
 8004298:	4614      	mov	r4, r2
 800429a:	461d      	mov	r5, r3
 800429c:	4643      	mov	r3, r8
 800429e:	18e3      	adds	r3, r4, r3
 80042a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042a4:	464b      	mov	r3, r9
 80042a6:	eb45 0303 	adc.w	r3, r5, r3
 80042aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042ca:	4629      	mov	r1, r5
 80042cc:	008b      	lsls	r3, r1, #2
 80042ce:	4621      	mov	r1, r4
 80042d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d4:	4621      	mov	r1, r4
 80042d6:	008a      	lsls	r2, r1, #2
 80042d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042dc:	f7fc fa80 	bl	80007e0 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b60      	ldr	r3, [pc, #384]	@ (8004468 <UART_SetConfig+0x4e4>)
 80042e6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	011c      	lsls	r4, r3, #4
 80042ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	61b9      	str	r1, [r7, #24]
 8004308:	415b      	adcs	r3, r3
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004310:	4641      	mov	r1, r8
 8004312:	1851      	adds	r1, r2, r1
 8004314:	6139      	str	r1, [r7, #16]
 8004316:	4649      	mov	r1, r9
 8004318:	414b      	adcs	r3, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004328:	4659      	mov	r1, fp
 800432a:	00cb      	lsls	r3, r1, #3
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004332:	4651      	mov	r1, sl
 8004334:	00ca      	lsls	r2, r1, #3
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	4603      	mov	r3, r0
 800433c:	4642      	mov	r2, r8
 800433e:	189b      	adds	r3, r3, r2
 8004340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004344:	464b      	mov	r3, r9
 8004346:	460a      	mov	r2, r1
 8004348:	eb42 0303 	adc.w	r3, r2, r3
 800434c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	67bb      	str	r3, [r7, #120]	@ 0x78
 800435a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004368:	4649      	mov	r1, r9
 800436a:	008b      	lsls	r3, r1, #2
 800436c:	4641      	mov	r1, r8
 800436e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004372:	4641      	mov	r1, r8
 8004374:	008a      	lsls	r2, r1, #2
 8004376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800437a:	f7fc fa31 	bl	80007e0 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4611      	mov	r1, r2
 8004384:	4b38      	ldr	r3, [pc, #224]	@ (8004468 <UART_SetConfig+0x4e4>)
 8004386:	fba3 2301 	umull	r2, r3, r3, r1
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2264      	movs	r2, #100	@ 0x64
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	1acb      	subs	r3, r1, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	3332      	adds	r3, #50	@ 0x32
 8004398:	4a33      	ldr	r2, [pc, #204]	@ (8004468 <UART_SetConfig+0x4e4>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a4:	441c      	add	r4, r3
 80043a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043aa:	2200      	movs	r2, #0
 80043ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80043ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80043b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	415b      	adcs	r3, r3
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c4:	4641      	mov	r1, r8
 80043c6:	1851      	adds	r1, r2, r1
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	4649      	mov	r1, r9
 80043cc:	414b      	adcs	r3, r1
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043dc:	4659      	mov	r1, fp
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4651      	mov	r1, sl
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4642      	mov	r2, r8
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043f6:	464b      	mov	r3, r9
 80043f8:	460a      	mov	r2, r1
 80043fa:	eb42 0303 	adc.w	r3, r2, r3
 80043fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	663b      	str	r3, [r7, #96]	@ 0x60
 800440a:	667a      	str	r2, [r7, #100]	@ 0x64
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004418:	4649      	mov	r1, r9
 800441a:	008b      	lsls	r3, r1, #2
 800441c:	4641      	mov	r1, r8
 800441e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004422:	4641      	mov	r1, r8
 8004424:	008a      	lsls	r2, r1, #2
 8004426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800442a:	f7fc f9d9 	bl	80007e0 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <UART_SetConfig+0x4e4>)
 8004434:	fba3 1302 	umull	r1, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	2164      	movs	r1, #100	@ 0x64
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	3332      	adds	r3, #50	@ 0x32
 8004446:	4a08      	ldr	r2, [pc, #32]	@ (8004468 <UART_SetConfig+0x4e4>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4422      	add	r2, r4
 800445a:	609a      	str	r2, [r3, #8]
}
 800445c:	bf00      	nop
 800445e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004462:	46bd      	mov	sp, r7
 8004464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004468:	51eb851f 	.word	0x51eb851f

0800446c <memset>:
 800446c:	4402      	add	r2, r0
 800446e:	4603      	mov	r3, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <__libc_init_array>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	4d0d      	ldr	r5, [pc, #52]	@ (80044b4 <__libc_init_array+0x38>)
 8004480:	4c0d      	ldr	r4, [pc, #52]	@ (80044b8 <__libc_init_array+0x3c>)
 8004482:	1b64      	subs	r4, r4, r5
 8004484:	10a4      	asrs	r4, r4, #2
 8004486:	2600      	movs	r6, #0
 8004488:	42a6      	cmp	r6, r4
 800448a:	d109      	bne.n	80044a0 <__libc_init_array+0x24>
 800448c:	4d0b      	ldr	r5, [pc, #44]	@ (80044bc <__libc_init_array+0x40>)
 800448e:	4c0c      	ldr	r4, [pc, #48]	@ (80044c0 <__libc_init_array+0x44>)
 8004490:	f000 f818 	bl	80044c4 <_init>
 8004494:	1b64      	subs	r4, r4, r5
 8004496:	10a4      	asrs	r4, r4, #2
 8004498:	2600      	movs	r6, #0
 800449a:	42a6      	cmp	r6, r4
 800449c:	d105      	bne.n	80044aa <__libc_init_array+0x2e>
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a4:	4798      	blx	r3
 80044a6:	3601      	adds	r6, #1
 80044a8:	e7ee      	b.n	8004488 <__libc_init_array+0xc>
 80044aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ae:	4798      	blx	r3
 80044b0:	3601      	adds	r6, #1
 80044b2:	e7f2      	b.n	800449a <__libc_init_array+0x1e>
 80044b4:	08004548 	.word	0x08004548
 80044b8:	08004548 	.word	0x08004548
 80044bc:	08004548 	.word	0x08004548
 80044c0:	0800454c 	.word	0x0800454c

080044c4 <_init>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	bf00      	nop
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr

080044d0 <_fini>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	bf00      	nop
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr
